<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask AssemblyFile=".\tools\xunit\xunit.runner.msbuild.dll" TaskName="Xunit.Runner.MSBuild.xunit" />

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <Root>$(MSBuildProjectDirectory)\</Root>
    <CarnacProjectDir>$(Root)src\Carnac\</CarnacProjectDir>
    <OutputPath Condition="'$(OutputPath)' == ''">$(CarnacProjectDir)bin\$(Configuration)\</OutputPath>
    <Version Condition="'$(Version)' == ''">0.0.0.9</Version>
  </PropertyGroup>

  <!--
============================================================
            RegexTransform
 
Transforms the input Items parameter by evaluating the
regular expression in their Find metadata and
replacing with their ReplaceWith metadata. Optional, the
options for the regular expression evaluation can be specified.
 
Example input item:
        <RegexTransform Include="$(BuildRoot)Src\GlobalAssemblyInfo.cs">
            <Find>AssemblyFileVersion\(".*?"\)</Find>
            <ReplaceWith>AssemblyFileVersion("$(FileVersion)")</ReplaceWith>
            <Options>Multiline | IgnorePatternWhitespace</Options>
        </RegexTransform>
 
Invoking the target:
    <RegexTransform Items="@(RegexTransform)" />
============================================================
-->
  <UsingTask TaskName="RegexTransform"
             TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Code Type="Fragment"
            Language="cs">
        <![CDATA[
       foreach(var item in Items)
       {
         string fileName = item.GetMetadata("FullPath");
         string find = item.GetMetadata("Find");
         string replaceWith = item.GetMetadata("ReplaceWith");
         string optionsValue = item.GetMetadata("Options") ?? "";
 
         var options = string.IsNullOrWhiteSpace(optionsValue) ?
             RegexOptions.None : (RegexOptions)Enum.Parse(typeof(RegexOptions), optionsValue.Replace('|', ','));
 
         if(!File.Exists(fileName))
         {
           Log.LogError("Could not find file: {0}", fileName);
           return false;
         }
         string content = File.ReadAllText(fileName);
         File.WriteAllText(
           fileName,
           Regex.Replace(
             content,
             find,
             replaceWith,
             options
           )
         );
       }
     ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="Restore">
    <Message Text=" ===========Restoring NuGet packages===========" Importance="High" />
    <Exec Command="$(Root)src\.nuget\nuget.exe restore $(Root)src\Carnac.sln" />
  </Target>

  <Target Name="Compile" DependsOnTargets="Restore">
    <Message Text=" ===========Compiling code===========" Importance="High" />
    <MSBuild Projects="$(Root)src\Carnac.sln" Properties="Configuration=$(Configuration)" />
  </Target>

  <Target Name="Test" DependsOnTargets="Compile">

    <Message Text="===========Tests===========" Importance="High" />

    <ItemGroup>
      <TestFiles Include="$(Root)src\Carnac.Tests\bin\$(Configuration)\*Tests.dll" />
    </ItemGroup>

    <xunit Assembly="@(TestFiles)" />
  </Target>

  <Target Name="Package" DependsOnTargets="Test;PackageChoco">
    <!--http://msdn.microsoft.com/en-us/library/6wc2ccdc.aspx-->
    <PropertyGroup>
      <Thumbprint>
        <!-- Insert generated thumbprint here -->
      </Thumbprint>
      <DeployUrl Condition="'$(DeployUrl)' == ''"></DeployUrl>
      <SupportUrl>https://github.com/Code52/carnac</SupportUrl>
      <VersionDir>$(OutputPath)$(Version)\</VersionDir>
      <AppManifest>$(VersionDir)Carnac.exe.manifest</AppManifest>
    </PropertyGroup>
    <ItemGroup>
      <Dependencies Include="$(OutputPath)*.dll" />
      <Keymaps Include="$(OutputPath)Keymaps\*.*" />
    </ItemGroup>

    <Move SourceFiles="@(Keymaps)" DestinationFolder="$(VersionDir)Keymaps" />
    <Move SourceFiles="@(Dependencies)" DestinationFolder="$(VersionDir)" />
    <Move SourceFiles="$(OutputPath)Carnac.exe" DestinationFolder="$(VersionDir)" />
    <Move SourceFiles="$(OutputPath)Carnac.pdb" DestinationFolder="$(VersionDir)" />
    <Copy SourceFiles="$(CarnacProjectDir)icon.embedded.ico" DestinationFolder="$(VersionDir)" />

    <ItemGroup>
      <EntryPoint Include="$(VersionDir)Carnac.exe" />
      <Files Include="$(VersionDir)Carnac.pdb">
        <IsDataFile>true</IsDataFile>
      </Files>
      <KeymapFiles Include="$(VersionDir)Keymaps\*.*">
        <IsDataFile>true</IsDataFile>
      </KeymapFiles>
      <ClickOnceDependencies Include="$(VersionDir)*.dll">
        <AssemblyType>Managed</AssemblyType>
      </ClickOnceDependencies>
      <IconFile Include="$(VersionDir)icon.embedded.ico"/>
      <FilesToRename Include="$(VersionDir)**\*.*" Exclude="**\*.manifest" />
    </ItemGroup>

    <CreateItem Include="@(KeymapFiles)" AdditionalMetadata="TargetPath=Keymaps/%(Filename)%(Extension)">
      <Output TaskParameter="Include" ItemName="KeymapFiles"/>
    </CreateItem>

    <GenerateApplicationManifest
            AssemblyName="Carnac.exe"
            AssemblyVersion="$(Version)"
            Description="TestApp"
            EntryPoint="@(EntryPoint)"
            Files="@(Files)"
            IconFile="@(IconFile)"
            OutputManifest="$(AppManifest)"
            Dependencies="@(ClickOnceDependencies)" />

    <GenerateDeploymentManifest
            AssemblyName="Carnac.application"
            AssemblyVersion="$(Version)"
            DeploymentUrl="$(DeployUrl)"
            Description="TestDeploy"
            EntryPoint="$(AppManifest)"
            MapFileExtensions="True"
            Install="true"
            OutputManifest="$(OutputPath)Carnac.application"
            Product="Carnac"
            Publisher="Code52"
            SupportUrl="$(SupportUrl)"
            UpdateEnabled="false">
      <Output
          ItemName="DeployManifest"
          TaskParameter="OutputManifest"/>
    </GenerateDeploymentManifest>
    
    <ItemGroup>
      <RegexTransform Include="$(OutputPath)Carnac.application">
        <Find><![CDATA[codebase="Carnac.exe.manifest"]]></Find>
        <ReplaceWith>codebase="$(Version)\Carnac.exe.manifest"</ReplaceWith>
        <Options>Singleline</Options>
      </RegexTransform>
    </ItemGroup>

    <RegexTransform Items="@(RegexTransform)" />

    <Move SourceFiles="@(FilesToRename)" DestinationFiles="@(FilesToRename->'%(RootDir)%(Directory)%(FileName)%(Extension).deploy')" />
  </Target>

  <Target Name="PackageChoco" DependsOnTargets="Test">
    <Message Text="===========Package - Choco===========" Importance="High" />

    <PropertyGroup>
      <ChocoSourceDir>$(Root)\src\Chocolatey\</ChocoSourceDir>
      <ChocoSpecPath>$(Root)\src\Chocolatey\carnac.nuspec</ChocoSpecPath>
      <ChocoOutputDir>$(OutputPath)Chocolatey\</ChocoOutputDir>
      <GithubOrg Condition="'$(GithubOrg)' == ''">Code52</GithubOrg>
    </PropertyGroup>

    <ItemGroup>
      <RegexTransform Include="$(ChocoSourceDir)\tools\chocolateyinstall.ps1">
        <Find><![CDATA[\$url = '.+']]></Find>
        <ReplaceWith>$url = 'https://github.com/$(GithubOrg)/carnac/releases/download/v$(Version)/carnac.$(Version).zip'</ReplaceWith>
        <Options>Singleline</Options>
      </RegexTransform>
    </ItemGroup>
    <RegexTransform Items="@(RegexTransform)" />

    <MakeDir Directories="$(ChocoOutputPath)" />
    <Exec Command="$(Root)src\.nuget\nuget.exe pack $(ChocoSpecPath) -OutputDirectory $(ChocoOutputDir) -Version $(Version) -NoPackageAnalysis" />
  </Target>

  <Target Name="PublishInstallToAzure">

    <!--To build and publish to azure: msbuild build.proj /p:BlobTargetUrl=https://myaccount.blob.core.windows.net/mycontainer/ /p:BlobTargetKey=key /target:PublishInstallToAzure-->
    <!--$(BlobTargetUrl) = https://myaccount.blob.core.windows.net/mycontainer/ -->

    <!--Upload everything except the application manifest as it should be done last (once everything else is uploaded)-->
    <Move SourceFiles="$(OutputPath)Carnac.application" DestinationFolder="$(OutputPath)ClickOnceApplicationFile\" />
    <Exec Command="$(Root)tools\AzCopy.exe $(OutputPath) $(BlobTargetUrl) /destkey:$(BlobTargetKey) /S /V /Y" />
    <Exec Command="$(Root)tools\AzCopy.exe $(OutputPath)ClickOnceApplicationFile\ $(BlobTargetUrl) /destkey:$(BlobTargetKey) /S /V /Y" />
  </Target>

  <Target Name="PublishToChoco" DependsOnTargets="PackageChoco">
    <PropertyGroup>
      <ChocoFeedUrl Condition="'$(ChocoFeedUrl)' == ''">https://chocolatey.org/</ChocoFeedUrl>
    </PropertyGroup>

    <!--To publish to a chocolatey feed: msbuild build.proj /p:ChocoFeedUrl=https://chocolatey.org/ /p:ChocoApiKey=dUr1aN /target:PublishToChoco-->
    <Exec Command="$(Root)src\.nuget\nuget.exe push $(ChocoOutputDir)carnac.$(Version).nupkg -apikey $(ChocoApiKey) -source $(ChocoFeedUrl)" />
  </Target>

</Project>
