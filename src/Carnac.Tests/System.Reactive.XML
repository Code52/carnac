<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Reactive</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.Disposables.SingleAssignmentDisposable">
            <summary>
            A SingleAssignmentDisposable only allows a single assignment of its disposable object. If it has already been assigned, attempts to set the underlying object will throw an InvalidOperationException.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.SingleAssignmentDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.SingleAssignmentDisposable"/> class.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.SingleAssignmentDisposable.Dispose">
            <summary>
            Disposes the underlying disposable.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.SingleAssignmentDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.SingleAssignmentDisposable.Disposable">
            <summary>
            Gets or sets the underlying disposable.
            </summary>
            <remarks>If the FutureDisposable has already been assigned then it will throw an InvalidOperationException.</remarks>
        </member>
        <member name="T:System.Reactive.Disposables.SerialDisposable">
            <summary>
            Represents a disposable whose underlying disposable can be swapped for another disposable which causes the previous underlying disposable to be disposed.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.SerialDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.SerialDisposable"/> class.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.SerialDisposable.Dispose">
            <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.SerialDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.SerialDisposable.Disposable">
            <summary>
            Gets or sets the underlying disposable.
            </summary>
            <remarks>If the ReplaceDisposable has already been disposed, assignment to this property causes immediate disposal of the given disposable object.  Assigning this property disposes the previous disposable object.</remarks>
        </member>
        <member name="T:System.Reactive.EventPattern`1">
            <summary>
            Represents the Sender and EventArg values of a .NET event.
            </summary>
        </member>
        <member name="M:System.Reactive.EventPattern`1.#ctor(System.Object,`0)">
            <summary>
            Represents the Sender and EventArg values of a .NET event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A TEventArgs that contains the event data.</param>
        </member>
        <member name="M:System.Reactive.EventPattern`1.Equals(System.Reactive.EventPattern{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:System.Reactive.EventPattern`1.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current EventPattern.
            </summary>
            <param name="obj">The System.Object to compare with the current EventPattern.</param>
            <returns>true if the specified EventPattern is equal to the current System.Object; otherwise, false.</returns>
        </member>
        <member name="M:System.Reactive.EventPattern`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current EventPattern.</returns>
        </member>
        <member name="M:System.Reactive.EventPattern`1.op_Equality(System.Reactive.EventPattern{`0},System.Reactive.EventPattern{`0})">
            <summary>
            Determines whether two specified EventPatterns have the same value.
            </summary>
            <param name="first">The first EventPattern to compare, or null.</param>
            <param name="second">The second EventPattern to compare, or null.</param>
            <returns>true if the value of first is the same as the value of second; otherwise, false.</returns>
        </member>
        <member name="M:System.Reactive.EventPattern`1.op_Inequality(System.Reactive.EventPattern{`0},System.Reactive.EventPattern{`0})">
            <summary>
            Determines whether two specified EventPatterns have different values.
            </summary>
            <param name="first">The first EventPattern to compare, or null.</param>
            <param name="second">The second EventPattern to compare, or null.</param>
            <returns>true if the value of first is different from the value of second; otherwise, false.</returns>
        </member>
        <member name="P:System.Reactive.EventPattern`1.Sender">
            <summary>
            Gets the sender value of the event.
            </summary>
        </member>
        <member name="P:System.Reactive.EventPattern`1.EventArgs">
            <summary>
            Gets the event arguments value of the event.
            </summary>
        </member>
        <member name="T:System.Reactive.IEventPatternSource`1">
            <summary>
            Represents a data stream signaling its elements by means of an event.
            </summary>
            <typeparam name="TEventArgs">Event arguments type.</typeparam>
        </member>
        <member name="E:System.Reactive.IEventPatternSource`1.OnNext">
            <summary>
            Event signaling the next element in the data stream.
            </summary>
        </member>
        <member name="T:System.Reactive.IEventSource`1">
            <summary>
            Represents a data stream signaling its elements by means of an event.
            </summary>
            <typeparam name="T">Event arguments type.</typeparam>
        </member>
        <member name="E:System.Reactive.IEventSource`1.OnNext">
            <summary>
            Event signaling the next element in the data stream.
            </summary>
        </member>
        <member name="T:System.Reactive.Linq.Observable">
            <summary>
            Provides a set of static methods for query operations over observable sequences.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``5(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``4})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``6(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``5})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``7(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``6})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``7})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``8})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``9})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``10})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``11})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``12})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``13})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``14})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Func{``0})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Func{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Func{``0,``1})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Func{``0,``1,``2,``3,``4,``5},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync(System.Action)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync(System.Action,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Action{``0})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Action{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Action{``0,``1})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Action{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Action{``0,``1,``2,``3,``4},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Action{``0,``1,``2,``3,``4,``5},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Start``1(System.Func{``0})">
            <summary>
            Invokes the function asynchronously.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Start``1(System.Func{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Invokes the function asynchronously.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Start(System.Action)">
            <summary>
            Invokes the action asynchronously.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Start(System.Action,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Invokes the action asynchronously.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``4(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``5(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``6(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Aggregate``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over an observable sequence. The specified seed value is used as the initial accumulator value.
            </summary>
            <param name="source">An observable sequence to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <returns>An observable sequence containing a single element with the final accumulator value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Aggregate``1(System.IObservable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies an accumulator function over an observable sequence.
            </summary>
            <param name="source">An observable sequence to aggregate over.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <returns>An observable sequence containing a single element with the final accumulator value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Any``1(System.IObservable{``0})">
            <summary>
            Determines whether an observable sequence contains any elements.
            </summary>
            <param name="source">An observable sequence to check for non-emptiness.</param>
            <returns>An observable sequence containing a single element determining whether the source sequence contains any elements.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Any``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether any element of an observable sequence satisfies a condition.
            </summary>
            <param name="source">An observable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.All``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of an observable sequence satisfy a condition.
            </summary>
            <param name="source">An observable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Contains``1(System.IObservable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether an observable sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="source">An observable sequence in which to locate a value.</param>
            <param name="value">The value to locate in the sequence.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>An observable sequence containing a single element determining whether the source sequence contains an element that has the specified value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Contains``1(System.IObservable{``0},``0)">
            <summary>
            Determines whether an observable sequence contains a specified element by using the default equality comparer.
            </summary>
            <param name="source">An observable sequence in which to locate a value.</param>
            <param name="value">The value to locate in the sequence.</param>
            <returns>An observable sequence containing a single element determining whether the source sequence contains an element that has the specified value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Count``1(System.IObservable{``0})">
            <summary>
            Returns a <see cref="T:System.Int32" /> that represents the total number of elements in an observable sequence.
            </summary>
            <param name="source">An observable sequence that contains elements to be counted.</param>
            <returns>An observable sequence containing a single element with the number of elements in the input sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LongCount``1(System.IObservable{``0})">
            <summary>
            Returns a <see cref="T:System.Int64" /> that represents the total number of elements in an observable sequence.
            </summary>
            <param name="source">An observable sequence that contains elements to be counted.</param>
            <returns>An observable sequence containing a single element with the number of elements in the input sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Double})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Single})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Decimal})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Int32})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Int64})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Returns the elements in an observable sequence with the minimum key value.
            </summary>
            <param name="source">An observable sequence to get the minimum elements for.</param>
            <param name="keySelector">Key selector function.</param>
            <returns>An observable sequence containing a list of zero or more elements that have a minimum key value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
            </summary>
            <param name="source">An observable sequence to get the minimum elements for.</param>
            <param name="keySelector">Key selector function.</param>
            <param name="comparer">Comparer used to compare key values.</param>
            <returns>An observable sequence containing a list of zero or more elements that have a minimum key value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0})">
            <summary>
            Returns the minimum element in an observable sequence.
            </summary>
            <param name="source">An observable sequence to determine the mimimum element of.</param>
            <returns>An observable sequence containing a single element with the minimum element in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the minimum element in an observable sequence according to the specified comparer.
            </summary>
            <param name="source">An observable sequence to determine the mimimum element of.</param>
            <param name="comparer">Comparer used to compare elements.</param>
            <returns>An observable sequence containing a single element with the minimum element in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Double})">
            <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</param>
            <returns>An observable sequence containing a single element with the minimum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Single})">
            <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</param>
            <returns>An observable sequence containing a single element with the minimum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Decimal})">
            <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
            <returns>An observable sequence containing a single element with the minimum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Int32})">
            <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
            <returns>An observable sequence containing a single element with the minimum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Int64})">
            <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
            <returns>An observable sequence containing a single element with the minimum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</param>
            <returns>An observable sequence containing a single element with the minimum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</param>
            <returns>An observable sequence containing a single element with the minimum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
            <returns>An observable sequence containing a single element with the minimum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
            <returns>An observable sequence containing a single element with the minimum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
            <returns>An observable sequence containing a single element with the minimum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Returns the elements in an observable sequence with the maximum key value.
            </summary>
            <param name="source">An observable sequence to get the maximum elements for.</param>
            <param name="keySelector">Key selector function.</param>
            <returns>An observable sequence containing a list of zero or more elements that have a maximum key value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the elements in an observable sequence with the maximum key value according to the specified comparer.
            </summary>
            <param name="source">An observable sequence to get the maximum elements for.</param>
            <param name="keySelector">Key selector function.</param>
            <param name="comparer">Comparer used to compare key values.</param>
            <returns>An observable sequence containing a list of zero or more elements that have a maximum key value.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0})">
            <summary>
            Returns the maximum element in an observable sequence.
            </summary>
            <param name="source">An observable sequence to determine the maximum element of.</param>
            <returns>An observable sequence containing a single element with the maximum element in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the maximum value in an observable sequence according to the specified comparer.
            </summary>
            <param name="source">An observable sequence to determine the maximum element of.</param>
            <param name="comparer">Comparer used to compare elements.</param>
            <returns>An observable sequence containing a single element with the maximum element in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Double})">
            <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</param>
            <returns>An observable sequence containing a single element with the maximum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Single})">
            <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</param>
            <returns>An observable sequence containing a single element with the maximum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Decimal})">
            <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
            <returns>An observable sequence containing a single element with the maximum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Int32})">
            <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
            <returns>An observable sequence containing a single element with the maximum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Int64})">
            <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
            <returns>An observable sequence containing a single element with the maximum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</param>
            <returns>An observable sequence containing a single element with the maximum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</param>
            <returns>An observable sequence containing a single element with the maximum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
            <returns>An observable sequence containing a single element with the maximum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
            <returns>An observable sequence containing a single element with the maximum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
            <returns>An observable sequence containing a single element with the maximum value in the sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Double})">
            <summary>
            Computes the average of an observable sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Single})">
            <summary>
            Computes the average of an observable sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Decimal})">
            <summary>
            Computes the average of an observable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Int32})">
            <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Int64})">
            <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToList``1(System.IObservable{``0})">
            <summary>
            Creates a list from an observable sequence.
            </summary>
            <param name="source">The source observable sequence to get a list of elements for.</param>
            <returns>An observable sequence containing a single element with a list containing all the elements of the source sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToArray``1(System.IObservable{``0})">
            <summary>
            Creates an array from an observable sequence.
            </summary>
            <param name="source">The source observable sequence to get an array of elements for.</param>
            <returns>An observable sequence containing a single element with an array containing all the elements of the source sequence.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToDictionary``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <param name="source">An observable sequence to create a dictionary for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToDictionary``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, and an element selector function.
            </summary>
            <param name="source">An observable sequence to create a dictionary for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToDictionary``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, and a comparer.
            </summary>
            <param name="source">An observable sequence to create a dictionary for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToDictionary``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function.
            </summary>
            <param name="source">An observable sequence to create a dictionary for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToLookup``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <param name="source">An observable sequence to create a lookup for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToLookup``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, and a comparer.
            </summary>
            <param name="source">An observable sequence to create a lookup for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToLookup``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, and an element selector function.
            </summary>
            <param name="source">An observable sequence to create a lookup for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToLookup``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Creates a lookup from an observable sequence according to a specified key selector function.
            </summary>
            <param name="source">An observable sequence to create a lookup for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
            </summary>
            <param name="first">First observable sequence to compare.</param>
            <param name="second">Second observable sequence to compare.</param>
            <param name="comparer">Comparer used to compare elements of both sequences.</param>
            <returns>An observable sequence that contains a single element which indicates whether both sequences are equal.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements pairwise.
            </summary>
            <param name="first">First observable sequence to compare.</param>
            <param name="second">Second observable sequence to compare.</param>
            <returns>An observable sequence that contains a single element which indicates whether both sequences are equal.</returns>
            <remarks>The return value of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.RefCount``1(System.Reactive.Subjects.IConnectableObservable{``0})">
            <summary>
            Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.
            </summary>
            <param name="source">Connectable observable sequence.</param>
            <returns>An observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Multicast``2(System.IObservable{``0},System.Reactive.Subjects.ISubject{``0,``1})">
            <summary>
            Returns a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject.
            </summary>
            <param name="source">Source sequence whose elements will be pushed into the specified subject.</param>
            <param name="subject">Subject to push source elements into.</param>
            <returns>A connectable observable sequence that upon connection causes the source sequence to push results into the specified subject.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Multicast``3(System.IObservable{``0},System.Func{System.Reactive.Subjects.ISubject{``0,``1}},System.Func{System.IObservable{``1},System.IObservable{``2}})">
            <summary>
            Returns an observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
            </summary>
            <param name="source">Source sequence which will be multicasted in the specified selector function.</param>
            <param name="subjectSelector">Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.</param>
            <param name="selector">Selector function which can use the multicasted source sequence subject to the policies enforced by the created subject.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Publish``1(System.IObservable{``0})">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will receive all notifications of the source from the time of the subscription on.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.PublishLast``1(System.IObservable{``0})">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will only receive the last notification of the source.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.PublishLast``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will only receive the last notification of the source.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0})">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will receive all the notifications of the source.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will receive all the notifications of the source.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            </summary>
            <param name="source">Source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            </summary>
            <param name="source">Source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications within window.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will receive all the notifications of the source.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications within window.
            </summary>
            <param name="source">Source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications within window.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will receive all the notifications of the source.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications within window.
            </summary>
            <param name="source">Source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will receive all the notifications of the source.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications.
            </summary>
            <param name="source">Source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will receive all the notifications of the source.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications.
            </summary>
            <param name="source">Source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications within window.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will receive all the notifications of the source.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications within window.
            </summary>
            <param name="source">Source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications within window.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will receive all the notifications of the source.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications within window.
            </summary>
            <param name="source">Source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive all the notifications of the source.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Publish``1(System.IObservable{``0},``0)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="initialValue">Initial value received by observers upon subscription.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
            <remarks>Subscribers will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},``0)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
            </summary>
            <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.</param>
            <param name="initialValue">Initial value received by observers upon subscription.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <seealso cref="T:System.Reactive.Subjects.Subject"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToEnumerable``1(System.IObservable{``0})">
            <summary>
            Converts an observable sequence to an enumerable sequence.
            </summary>
            <param name="source">An observable sequence to convert to an enumerable sequence.</param>
            <returns>The enumerable sequence containing the elements in the observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GetEnumerator``1(System.IObservable{``0})">
            <summary>
            Returns an enumerator that enumerates all values of the observable sequence.
            </summary>
            <param name="source">An observable sequence to get an enumerator for.</param>
            <returns>The enumerator that can be used to enumerate over the elements in the observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.MostRecent``1(System.IObservable{``0},``0)">
            <summary>
            Samples the most recent value in an observable sequence.
            </summary>
            <param name="source">Source observable sequence.</param>
            <param name="initialValue">Initial value that will be yielded by the enumerable sequence if no element has been sampled yet.</param>
            <returns>The enumerable sequence that returns the last sampled element upon each iteration.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Next``1(System.IObservable{``0})">
            <summary>
            Samples the next value (blocking without buffering) from in an observable sequence.
            </summary>
            <param name="source">Source observable sequence.</param>
            <returns>The enumerable sequence that blocks upon each iteration until the next element in the observable source sequence becomes available.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Latest``1(System.IObservable{``0})">
            <summary>
            Samples the most recent value in an observable sequence.
            </summary>
            <param name="source">Source observable sequence.</param>
            <returns>The enumerable sequence that returns the last sampled element upon each iteration and subsequently blocks until the next element in the observable source sequence becomes available.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.First``1(System.IObservable{``0})">
            <summary>
            Returns the first element of an observable sequence.
            </summary>
            <param name="source">Source observable sequence.</param>
            <returns>The first element in the observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FirstOrDefault``1(System.IObservable{``0})">
            <summary>
            Returns the first element of an observable sequence, or a default value if no value is found.
            </summary>
            <param name="source">Source observable sequence.</param>
            <returns>The first element in the observable sequence, or a default value if no value is found.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.First``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of an observable sequence that matches the predicate.
            </summary>
            <param name="source">Source observable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the sequence.</param>
            <returns>The first element in the observable sequence for which the predicate holds.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FirstOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of an observable sequence that matches the predicate, or a default value if no value is found.
            </summary>
            <param name="source">Source observable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the sequence.</param>
            <returns>The first element in the observable sequence for which the predicate holds, or a default value if no value is found.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Last``1(System.IObservable{``0})">
            <summary>
            Returns the last element of an observable sequence.
            </summary>
            <param name="source">Source observable sequence.</param>
            <returns>The last element in the observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LastOrDefault``1(System.IObservable{``0})">
            <summary>
            Returns the last element of an observable sequence, or a default value if no value is found.
            </summary>
            <param name="source">Source observable sequence.</param>
            <returns>The last element in the observable sequence, or a default value if no value is found.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Last``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of an observable sequence that matches the predicate.
            </summary>
            <param name="source">Source observable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the sequence.</param>
            <returns>The last element in the observable sequence for which the predicate holds.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LastOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of an observable sequence that matches the predicate, or a default value if no value is found.
            </summary>
            <param name="source">Source observable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the sequence.</param>
            <returns>The last element in the observable sequence, or a default value if no value is found.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Single``1(System.IObservable{``0})">
            <summary>
            Returns the only element of an observable sequence and throws an exception if there is not exactly one element in the observable sequence.
            </summary>
            <param name="source">Source observable sequence.</param>
            <returns>The single element in the observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SingleOrDefault``1(System.IObservable{``0})">
            <summary>
            Returns the only element of an observable sequence, or a default value if the observable sequence is empty; this method throws an exception if there is more than one element in the observable sequence.
            </summary>
            <param name="source">Source observable sequence.</param>
            <returns>The single element in the observable sequence, or a default value if no value is found.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Single``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of an observable sequence that matches the predicate and throws an exception if there is not exactly one element in the observable sequence.
            </summary>
            <param name="source">Source observable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the sequence.</param>
            <returns>The single element in the observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SingleOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of an observable sequence that matches the predicate, or a default value if no value is found; this method throws an exception if there is more than one element in the observable sequence.
            </summary>
            <param name="source">Source observable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the sequence.</param>
            <returns>The single element in the observable sequence, or a default value if no value is found.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ForEach``1(System.IObservable{``0},System.Action{``0})">
            <summary>
            Invokes an action for each element in the observable sequence, and blocks until the sequence is terminated.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="onNext">Action to invoke for each element in the observable sequence.</param>
            <remarks>Because of its blocking nature, this operator is mainly used for testing.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Asynchronously notify observers on the specified scheduler.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="scheduler">Scheduler to notify observers on.</param>
            <returns>The source sequence whose observations happen on the specified scheduler.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the specified scheduler.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="scheduler">Scheduler to perform subscription and unsubscription actions on.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the specified synchronization context.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="context">Synchronization context to perform subscription and unsubscription actions on.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified synchronization context.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>
            Asynchronously notify observers on the specified synchronization context.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="context">Synchronization context to notify observers on.</param>
            <returns>The source sequence whose observations happen on the specified synchronization context.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Synchronize``1(System.IObservable{``0})">
            <summary>
            Synchronizes the observable sequence.
            </summary>
            <param name="source">Source sequence.</param>
            <returns>The source sequence whose outgoing calls to observers are synchronized.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Synchronize``1(System.IObservable{``0},System.Object)">
            <summary>
            Synchronizes the observable sequence.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="gate">Gate object to synchronize each observer call on.</param>
            <returns>The source sequence whose outgoing calls to observers are synchronized on the given gate object.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})">
            <summary>
            Exposes an observable sequence as an object with a .NET event.
            </summary>
            <param name="source">Observable source sequence.</param>
            <returns>The event source object.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToEvent``1(System.IObservable{``0})">
            <summary>
            Exposes an observable sequence as an object with a .NET event.
            </summary>
            <param name="source">Observable source sequence.</param>
            <returns>The event source object.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})">
            <summary>
            Exposes an observable sequence as an object with a .NET event.
            </summary>
            <param name="source">Observable source sequence.</param>
            <returns>The event source object.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Never``1">
            <summary>
            Returns a non-terminating observable sequence.
            </summary>
            <returns>Observable sequence whose observers will never get called.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Empty``1">
            <summary>
            Returns an empty observable sequence.
            </summary>
            <returns>Observable sequence with no elements.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Empty``1(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an empty observable sequence.
            </summary>
            <param name="scheduler">Scheduler to send the termination call on.</param>
            <returns>Observable sequence with no elements.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Return``1(``0)">
            <summary>
            Returns an observable sequence that contains a single element.
            </summary>
            <param name="value">Single element in the resulting observable sequence.</param>
            <returns>Observable sequence containing the single specified element.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Return``1(``0,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that contains a single value.
            </summary>
            <param name="value">Single element in the resulting observable sequence.</param>
            <param name="scheduler">Scheduler to send the single element on.</param>
            <returns>Observable sequence containing the single specified element.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)">
            <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
            <param name="exception">Exception object used for the sequence's termination.</param>
            <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
            <param name="exception">Exception object used for the sequence's termination.</param>
            <param name="scheduler">Scheduler to send the exceptional termination call on.</param>
            <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
            <summary>
            Subscribes an observer to an enumerable sequence.
            </summary>
            <param name="source">Enumerable sequence to subscribe to.</param>
            <param name="observer">Observer that will receive notifications from the enumerable sequence.</param>
            <returns>Disposable object that can be used to unsubscribe the observer from the enumerable</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Subscribes an observer to an enumerable sequence.
            </summary>
            <param name="source">Enumerable sequence to subscribe to.</param>
            <param name="observer">Observer that will receive notifications from the enumerable sequence.</param>
            <param name="scheduler">Scheduler to perform the enumeration on.</param>
            <returns>Disposable object that can be used to unsubscribe the observer from the enumerable</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Action{System.EventHandler},System.Action{System.EventHandler})">
            <summary>
            Converts a .NET event, conforming to the standard .NET event pattern, to an observable sequence.
            </summary>
            <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
            <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0})">
            <summary>
            Converts a .NET event, conforming to the standard .NET event pattern, to an observable sequence.
            </summary>
            <param name="conversion">A function used to convert the given event handler to a delegate compatible with the underlying .NET event. The resulting delegate is used in calls to the addHandler and removeHandler action parameters.</param>
            <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
            <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Action{``0},System.Action{``0})">
            <summary>
            Converts a .NET event, conforming to the standard .NET event pattern, to an observable sequence.
            </summary>
            <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
            <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}})">
            <summary>
            Converts a .NET event, conforming to the standard .NET event pattern, to an observable sequence.
            </summary>
            <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
            <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Object,System.String)">
            <summary>
            Converts a .NET event, conforming to the standard .NET event pattern, to an observable sequence, using reflection to find an instance event.
            </summary>
            <param name="target">Object instance that exposes the event to convert.</param>
            <param name="eventName">Name of the event to convert.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Type,System.String)">
            <summary>
            Converts a .NET event, conforming to the standard .NET event pattern, to an observable sequence, using reflection to find a static event.
            </summary>
            <param name="type">Type that exposes the static event to convert.</param>
            <param name="eventName">Name of the event to convert.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Object,System.String)">
            <summary>
            Converts a .NET event, conforming to the standard .NET event pattern, to an observable sequence, using reflection to find an instance event.
            </summary>
            <param name="target">Object instance that exposes the event to convert.</param>
            <param name="eventName">Name of the event to convert.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Type,System.String)">
            <summary>
            Converts a .NET event, conforming to the standard .NET event pattern, to an observable sequence, using reflection to find a static event.
            </summary>
            <param name="type">Type that exposes the static event to convert.</param>
            <param name="eventName">Name of the event to convert.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Func{System.Action{``1},``0},System.Action{``0},System.Action{``0})">
            <summary>
            Converts a .NET event to an observable sequence.
            </summary>
            <param name="conversion">A function used to convert the given event handler to a delegate compatible with the underlying .NET event. The resulting delegate is used in calls to the addHandler and removeHandler action parameters.</param>
            <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
            <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Action{``0},System.Action{``0})">
            <summary>
            Converts a .NET event to an observable sequence.
            </summary>
            <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
            <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}})">
            <summary>
            Converts a .NET event to an observable sequence.
            </summary>
            <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
            <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent(System.Action{System.Action},System.Action{System.Action})">
            <summary>
            Converts a .NET event to an observable sequence.
            </summary>
            <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
            <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
            <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until the condition fails.
            </summary>
            <param name="initialState">Initial state.</param>
            <param name="condition">Condition to terminate generation (upon returning false).</param>
            <param name="iterate">Iteration step function.</param>
            <param name="resultSelector">Selector function for results produced in the sequence.</param>
            <param name="scheduler">Scheduler on which to run the generator loop.</param>
            <returns>The generated sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until the condition fails.
            </summary>
            <param name="initialState">Initial state.</param>
            <param name="condition">Condition to terminate generation (upon returning false).</param>
            <param name="iterate">Iteration step function.</param>
            <param name="resultSelector">Selector function for results produced in the sequence.</param>
            <returns>The generated sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Defer``1(System.Func{System.IObservable{``0}})">
            <summary>
            Returns an observable sequence that invokes the observableFactory function whenever a new observer subscribes.
            </summary>
            <param name="observableFactory">Observable factory function to invoke for each observer that subscribes to the resulting sequence.</param>
            <returns>Observable sequence whose observers trigger an invocation of the given observable factory function.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Using``2(System.Func{``1},System.Func{``1,System.IObservable{``0}})">
            <summary>
            Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
            </summary>
            <param name="resourceFactory">Factory function to obtain a resource object.</param>
            <param name="observableFactory">Factory function to obtain an observable sequence that depends on the obtained resource.</param>
            <returns>Observable sequence whose lifetime controls the lifetime of the dependent resource object.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an enumerable sequence to an observable sequence.
            </summary>
            <param name="source">Enumerable sequence to convert to an observable sequence.</param>
            <returns>The observable sequence whose elements are pulled from the given enumerable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts an enumerable sequence to an observable sequence.
            </summary>
            <param name="source">Enumerable sequence to convert to an observable sequence.</param>
            <param name="scheduler">Scheduler to run the enumeration of the input sequence on.</param>
            <returns>The observable sequence whose elements are pulled from the given enumerable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.IDisposable})">
            <summary>
            Creates an observable sequence from a specified Subscribe method implementation.
            </summary>
            <param name="subscribe">Implementation of the resulting observable sequence's Subscribe method.</param>
            <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
            <remarks>Use of this operator is preferred over manual implementation of the IObservable&lt;T&gt; interface.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Action})">
            <summary>
            Creates an observable sequence from a specified Subscribe method implementation.
            </summary>
            <param name="subscribe">Implementation of the resulting observable sequence's Subscribe method, returning an Action delegate that will be wrapped in an IDisposable.</param>
            <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
            <remarks>Use of this operator is preferred over manual implementation of the IObservable&lt;T&gt; interface.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Range(System.Int32,System.Int32)">
            <summary>
            Generates an observable sequence of integral numbers within a specified range.
            </summary>
            <param name="start">The value of the first integer in the sequence.</param>
            <param name="count">The number of sequential integers to generate.</param>
            <returns>An observable sequence that contains a range of sequential integral numbers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Range(System.Int32,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence of integral numbers within a specified range.
            </summary>
            <param name="start">The value of the first integer in the sequence.</param>
            <param name="count">The number of sequential integers to generate.</param>
            <param name="scheduler">Scheduler to run the generator loop on.</param>
            <returns>An observable sequence that contains a range of sequential integral numbers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(System.IObservable{``0})">
            <summary>
            Repeats the observable sequence indefinitely.
            </summary>
            <param name="source">Observable sequence to repeat.</param>
            <returns>The observable sequence producing the elements of the given sequence repeatedly and sequentially.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(System.IObservable{``0},System.Int32)">
            <summary>
            Repeats the observable sequence a specified number of times.
            </summary>
            <param name="source">Observable sequence to repeat.</param>
            <param name="repeatCount">Number of times to repeat the sequence.</param>
            <returns>The observable sequence producing the elements of the given sequence repeatedly.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Retry``1(System.IObservable{``0})">
            <summary>
            Repeats the source observable sequence until it successfully terminates.
            </summary>
            <param name="source">Observable sequence to repeat until it successfully terminates.</param>
            <returns>Observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Retry``1(System.IObservable{``0},System.Int32)">
            <summary>
            Repeats the source observable sequence the specified number of times or until it successfully terminates.
            </summary>
            <param name="source">Observable sequence to repeat until it successfully terminates.</param>
            <param name="retryCount">Number of times to repeat the sequence.</param>
            <returns>Observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence that repeats the given element infinitely.
            </summary>
            <param name="value">Element to repeat.</param>
            <param name="scheduler">Scheduler to run the producer loop on.</param>
            <returns>An observable sequence that repeats the given element infinitely.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence that repeats the given element the specified number of times.
            </summary>
            <param name="value">Element to repeat.</param>
            <param name="repeatCount">Number of times to repeat the element.</param>
            <param name="scheduler">Scheduler to run the producer loop on.</param>
            <returns>An observable sequence that repeats the given element the specified number of times.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0)">
            <summary>
            Generates an observable sequence that repeats the given element infinitely.
            </summary>
            <param name="value">Element to repeat.</param>
            <returns>An observable sequence that repeats the given element infinitely.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Int32)">
            <summary>
            Generates an observable sequence that repeats the given element the specified number of times.
            </summary>
            <param name="value">Element to repeat.</param>
            <param name="repeatCount">Number of times to repeat the element.</param>
            <returns>An observable sequence that repeats the given element the specified number of times.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.And``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Matches when both observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Then``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Matches when the observable sequence has an available value and projects the value.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.When``1(System.Reactive.Joins.Plan{``0}[])">
            <summary>
            Joins together the results from several patterns.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.When``1(System.Collections.Generic.IEnumerable{System.Reactive.Joins.Plan{``0}})">
            <summary>
            Joins together the results from several patterns.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}})">
            <summary>
            Merges an observable sequence of observable sequences into an observable sequence.
            </summary>
            <param name="sources">Observable sequence of inner observable sequences.</param>
            <returns>The observable sequence that merges the elements of the inner sequences.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Switch``1(System.IObservable{System.IObservable{``0}})">
            <summary>
            Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
            </summary>
            <param name="sources">Observable sequence of inner observable sequences.</param>
            <returns>The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Concatenates two observable sequences.
            </summary>
            <param name="first">First observable sequence.</param>
            <param name="second">Second observable sequence.</param>
            <returns>An observable sequence that contains the elements of the first sequence, followed by those of the second the sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{``0}[])">
            <summary>
            Concatenates all the observable sequences.
            </summary>
            <param name="sources">Observable sequences to concatenate.</param>
            <returns>An observable sequence that contains the elements of each given sequence, in sequential order.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Concat``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Concatenates an enumerable sequence of observable sequences.
            </summary>
            <param name="sources">Observable sequences to concatenate.</param>
            <returns>An observable sequence that contains the elements of each given sequence, in sequential order.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Merges an enumerable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
            </summary>
            <param name="sources">Enumerable sequence of observable sequences.</param>
            <param name="maxConcurrent">Maximum number of observable sequences being subscribed to concurrently.</param>
            <param name="scheduler">Scheduler to run the enumeration of the sequence of sources on.</param>
            <returns>The observable sequence that merges the elements of the observable sequences.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Int32)">
            <summary>
            Merges an enumerable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
            </summary>
            <param name="sources">Enumerable sequence of observable sequences.</param>
            <param name="maxConcurrent">Maximum number of observable sequences being subscribed to concurrently.</param>
            <returns>The observable sequence that merges the elements of the observable sequences.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}},System.Int32)">
            <summary>
            Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
            </summary>
            <param name="sources">Observable sequence of inner observable sequences.</param>
            <param name="maxConcurrent">Maximum number of inner observable sequences being subscribed to concurrently.</param>
            <returns>The observable sequence that merges the elements of the inner sequences.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{System.IObservable{``0}})">
            <summary>
            Concatenates an observable sequence of observable sequences.
            </summary>
            <param name="sources">Observable sequence of inner observable sequences.</param>
            <returns>An observable sequence that contains the elements of each observed inner sequence, in sequential order.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Catch``2(System.IObservable{``0},System.Func{``1,System.IObservable{``0}})">
            <summary>
            Continues an observable sequence that is terminated by an exception of the specified type with the observable sequence produced by the handler.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="handler">Exception handler function, producing another observable sequence.</param>
            <returns>An observable sequence containing the source sequence's elements, followed by the elements produced by the handler's resulting observable sequence in case an exception occurred.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Catch``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
            <param name="first">First observable sequence whose exception (if any) is caught.</param>
            <param name="second">Second observable sequence used to produce results when an error occurred in the first sequence.</param>
            <returns>An observable sequence containing the first sequence's elements, followed by the elements of the second sequence in case an exception occurred.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Catch``1(System.IObservable{``0}[])">
            <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
            <param name="sources">Observable sequences to catch exceptions for.</param>
            <returns>An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Catch``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
            <param name="sources">Observable sequences to catch exceptions for.</param>
            <returns>An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
            <param name="first">First observable sequence whose exception (if any) is caught.</param>
            <param name="second">Second observable sequence used to produce results after the first sequence terminates.</param>
            <returns>An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0}[])">
            <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
            <param name="sources">Observable sequences to concatenate.</param>
            <returns>An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
            <param name="sources">Observable sequences to concatenate.</param>
            <returns>An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two observable sequences into one observable sequence by combining their elements in a pairwise fashion.
            </summary>
            <param name="first">First observable source.</param>
            <param name="second">Second observable source.</param>
            <param name="resultSelector">Function to invoke for each consecutive pair of elements from the first and second source.</param>
            <returns>An observable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``3(System.IObservable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges an observable sequence and an enumerable sequence into one observable sequence by using the selector function.
            </summary>
            <param name="first">First observable source.</param>
            <param name="second">Second enumerable source.</param>
            <param name="resultSelector">Function to invoke for each consecutive pair of elements from the first and second source.</param>
            <returns>An observable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two observable sequences into one observable sequence by using the selector function whenever one of the observable sequences produces an element.
            </summary>
            <param name="first">First observable source.</param>
            <param name="second">Second observable source.</param>
            <param name="resultSelector">Function to invoke whenever either of the sources produces an element.</param>
            <returns>An observable sequence containing the result of combining elements of both sources using the specified result selector function.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Propagates the observable sequence that reacts first.
            </summary>
            <param name="first">First observable sequence.</param>
            <param name="second">Second observable sequence.</param>
            <returns>An observable sequence that surfaces either of the given sequences, whichever reacted first.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0}[])">
            <summary>
            Propagates the observable sequence that reacts first.
            </summary>
            <param name="sources">Observable sources competing to react first.</param>
            <returns>An observable sequence that surfaces any of the given sequences, whichever reacted first.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Amb``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Propagates the observable sequence that reacts first.
            </summary>
            <param name="sources">Observable sources competing to react first.</param>
            <returns>An observable sequence that surfaces any of the given sequences, whichever reacted first.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeUntil``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Returns the values from the source observable sequence until the other observable sequence produces a value.
            </summary>
            <param name="source">Source sequence to propagate elements for.</param>
            <param name="other">Observable sequence that terminates propagation of elements of the source sequence.</param>
            <returns>An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipUntil``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Returns the values from the source observable sequence only after the other observable sequence produces a value.
            </summary>
            <param name="source">Source sequence to propagate elements for.</param>
            <param name="other">Observable sequence that triggers propagation of elements of the source sequence.</param>
            <returns>An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Merges two observable sequences into a single observable sequence.
            </summary>
            <param name="first">First observable sequence.</param>
            <param name="second">Second observable sequence.</param>
            <param name="scheduler">Scheduler used to introduce concurrency for making subscriptions to the given sequences.</param>
            <returns>The observable sequence that merges the elements of the given sequences.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Merges two observable sequences into a single observable sequence.
            </summary>
            <param name="first">First observable sequence.</param>
            <param name="second">Second observable sequence.</param>
            <returns>The observable sequence that merges the elements of the given sequences.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0}[])">
            <summary>
            Merges all the observable sequences into a single observable sequence.
            </summary>
            <param name="sources">Observable sequences.</param>
            <returns>The observable sequence that merges the elements of the observable sequences.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Reactive.Concurrency.IScheduler,System.IObservable{``0}[])">
            <summary>
            Merges all the observable sequences into a single observable sequence.
            </summary>
            <param name="sources">Observable sequences.</param>
            <param name="scheduler">Scheduler to run the enumeration of the sequence of sources on.</param>
            <returns>The observable sequence that merges the elements of the observable sequences.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Merges an enumerable sequence of observable sequences into a single observable sequence.
            </summary>
            <param name="sources">Enumerable sequence of observable sequences.</param>
            <returns>The observable sequence that merges the elements of the observable sequences.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Merges an enumerable sequence of observable sequences into a single observable sequence.
            </summary>
            <param name="sources">Enumerable sequence of observable sequences.</param>
            <param name="scheduler">Scheduler to run the enumeration of the sequence of sources on.</param>
            <returns>The observable sequence that merges the elements of the observable sequences.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``3(System.IObservable{``0},System.IObservable{``1},System.Func{``1,System.IObservable{``2}})">
            <summary>
            Projects each element of an observable sequence into zero or more windows.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="windowOpenings">Observable sequence whose elements denote the creation of new windows.</param>
            <param name="windowClosingSelector">A function invoked to define the closing of each produced window.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``2(System.IObservable{``0},System.Func{System.IObservable{``1}})">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="windowClosingSelector">A function invoked to define the boundaries of the produced windows. A new window is started when the previous one is closed.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``3(System.IObservable{``0},System.IObservable{``1},System.Func{``1,System.IObservable{``2}})">
            <summary>
            Projects each element of an observable sequence into zero or more buffers.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="bufferOpenings">Observable sequence whose elements denote the creation of new buffers.</param>
            <param name="bufferClosingSelector">A function invoked to define the closing of each produced buffer.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``2(System.IObservable{``0},System.Func{System.IObservable{``1}})">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="bufferClosingSelector">A function invoked to define the boundaries of the produced buffers. A new buffer is started when the previous one is closed.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">
            <summary>
            Materializes the implicit notifications of an observable sequence as explicit notification values.
            </summary>
            <param name="source">An observable sequence to get notification values for.</param>
            <returns>An observable sequence containing the materialized notification values from the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">
            <summary>
            Dematerializes the explicit notification values of an observable sequence as implicit notifications.
            </summary>
            <param name="source">An observable sequence containing explicit notification values which have to be turned into implicit notifications.</param>
            <returns>An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.AsObservable``1(System.IObservable{``0})">
            <summary>
            Hides the identity of an observable sequence.
            </summary>
            <param name="source">An observable sequence whose identity to hide.</param>
            <returns>An observable sequence that hides the identity of the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.Int32,System.Int32)">
            <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="count">Length of each window.</param>
            <param name="skip">Number of elements to skip between creation of consecutive windows.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.Int32)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on element count information.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="count">Length of each window.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.Int32,System.Int32)">
            <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="count">Length of each buffer.</param>
            <param name="skip">Number of elements to skip between creation of consecutive buffers.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.Int32)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on element count information.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="count">Length of each buffer.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},``0[])">
            <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
            <param name="source">Source sequence to prepend values to.</param>
            <param name="values">Values to prepend to the specified sequence.</param>
            <returns>The source sequence prepended with the specified values.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,``0[])">
            <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
            <param name="source">Source sequence to prepend values to.</param>
            <param name="scheduler">Scheduler to emit the prepended values on.</param>
            <param name="values">Values to prepend to the specified sequence.</param>
            <returns>The source sequence prepended with the specified values.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Scan``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result. The specified seed value is used as the initial accumulator value.
            </summary>
            <param name="source">An observable sequence to accumulate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <returns>An observable sequence containing the accumulated values.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Scan``1(System.IObservable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.  
            </summary>
            <param name="source">An observable sequence to accumulate over.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <returns>An observable sequence containing the accumulated values.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
            </summary>
            <param name="source">An observable sequence to retain distinct contiguous elements for, based on a computed key value.</param>
            <param name="keySelector">A function to compute the comparison key for each element.</param>
            <param name="comparer">Equality comparer for computed key values.</param>
            <returns>An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the comparer.
            </summary>
            <param name="source">An observable sequence to retain distinct contiguous elements for.</param>
            <param name="comparer">Equality comparer for source elements.</param>
            <returns>An observable sequence only containing the distinct contiguous elements from the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the keySelector.
            </summary>
            <param name="source">An observable sequence to retain distinct contiguous elements for, based on a computed key value.</param>
            <param name="keySelector">A function to compute the comparison key for each element.</param>
            <returns>An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements.
            </summary>
            <param name="source">An observable sequence to retain distinct contiguous elements for.</param>
            <returns>An observable sequence only containing the distinct contiguous elements from the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Distinct``1(System.IObservable{``0})">
            <summary>
            Returns an observable sequence that contains only distinct elements.
            </summary>
            <param name="source">An observable sequence to retain distinct elements for.</param>
            <returns>An observable sequence only containing the distinct elements from the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Distinct``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an observable sequence that contains only distinct elements according to the comparer.
            </summary>
            <param name="source">An observable sequence to retain distinct elements for.</param>
            <param name="comparer">Equality comparer for source elements.</param>
            <returns>An observable sequence only containing the distinct elements from the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Distinct``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Returns an observable sequence that contains only distinct elements according to the keySelector.
            </summary>
            <param name="source">An observable sequence to retain distinct elements for.</param>
            <param name="keySelector">A function to compute the comparison key for each element.</param>
            <returns>An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Distinct``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
            </summary>
            <param name="source">An observable sequence to retain distinct elements for.</param>
            <param name="keySelector">A function to compute the comparison key for each element.</param>
            <param name="comparer">Equality comparer for source elements.</param>
            <returns>An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Finally``1(System.IObservable{``0},System.Action)">
            <summary>
            Invokes a specified action after source observable sequence terminates normally or by an exception.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="finallyAction">Action to invoke after the source observable sequence terminates.</param>
            <returns>Source sequence with the action-invoking termination behavior applied.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0})">
            <summary>
            Invokes an action for each element in the observable sequence.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="onNext">Action to invoke for each element in the observable sequence.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action)">
            <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon graceful termination of the observable sequence.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="onNext">Action to invoke for each element in the observable sequence.</param>
            <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon exceptional termination of the observable sequence.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="onNext">Action to invoke for each element in the observable sequence.</param>
            <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="onNext">Action to invoke for each element in the observable sequence.</param>
            <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
            <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.IObserver{``0})">
            <summary>
            Invokes the observer's methods for their side-effects.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="observer">Observer whose methods to invoke as part of the source sequence's observation.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipLast``1(System.IObservable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements at the end of an observable sequence.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="count">Number of elements to bypass at the end of the source sequence.</param>
            <returns>An observable sequence containing the source sequence elements except for the bypassed ones at the end.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of an observable sequence.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="count">Number of elements to take from the end of the source sequence.</param>
            <returns>An observable sequence containing the specified number of elements from the of the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.IgnoreElements``1(System.IObservable{``0})">
            <summary>
            Ignores all values in an observable sequence leaving only the termination messages.
            </summary>
            <param name="source">Source sequence.</param>
            <returns>An empty observable sequence that signals termination, successful or exceptional, of the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ElementAt``1(System.IObservable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <param name="source">Observable sequence to return the element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>An observable sequence that produces the element at the specified position in the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ElementAtOrDefault``1(System.IObservable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence or a default value if the index is out of range.
            </summary>
            <param name="source">Observable sequence to return the element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>An observable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DefaultIfEmpty``1(System.IObservable{``0})">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton sequence if the sequence is empty.
            </summary>
            <param name="source">The sequence to return a default value for if it is empty.</param>
            <returns>An observable sequence that contains the default value for the TSource type if the source is empty; otherwise, the elements of the source itself.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DefaultIfEmpty``1(System.IObservable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
            </summary>
            <param name="source">The sequence to return the specified value for if it is empty.</param>
            <param name="defaultValue">The value to return if the sequence is empty.</param>
            <returns>An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of an observable sequence into a new form.
            </summary>
            <param name="source">A sequence of elements to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element.</param>
            <returns>An observable sequence whose elements are the result of invoking the transform function on each element of source.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects each element of an observable sequence into a new form by incorporating the element's index.
            </summary>
            <param name="source">A sequence of elements to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
            <returns>An observable sequence whose elements are the result of invoking the transform function on each element of source.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the elements of an observable sequence based on a predicate.
            </summary>
            <param name="source">An observable sequence whose elements to filter.</param>
            <param name="predicate">A function to test each source element for a condition.</param>
            <returns>An observable sequence that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
            </summary>
            <param name="source">An observable sequence whose elements to filter.</param>
            <param name="predicate">A function to test each source element for a conditio; the second parameter of the function represents the index of the source element.</param>
            <returns>An observable sequence that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Groups the elements of an observable sequence and selects the resulting elements by using a specified function.
            </summary>
            <param name="source">An observable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            </summary>
            <param name="source">An observable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            </summary>
            <param name="source">An observable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            </summary>
            <param name="source">An observable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``4(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``2},System.IObservable{``3}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            A duration selector function is used to control the lifetime of groups.
            </summary>
            <param name="source">An observable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
            <param name="durationSelector">A function to signal the expiration of a group.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``4(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``2},System.IObservable{``3}})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and selects the resulting elements by using a specified function.
            A duration selector function is used to control the lifetime of groups.
            </summary>
            <param name="source">An observable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
            <param name="durationSelector">A function to signal the expiration of a group.</param>
            <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``3(System.IObservable{``0},System.Func{``0,``1},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``0},System.IObservable{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            A duration selector function is used to control the lifetime of groups.
            </summary>
            <param name="source">An observable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="durationSelector">A function to signal the expiration of a group.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``3(System.IObservable{``0},System.Func{``0,``1},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``0},System.IObservable{``2}})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            A duration selector function is used to control the lifetime of groups.
            </summary>
            <param name="source">An observable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="durationSelector">A function to signal the expiration of a group.</param>
            <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous values from the start of an observable sequence.
            </summary>
            <param name="source">The sequence to take elements from.</param>
            <param name="count">The number of elements to return.</param>
            <returns>An observable sequence that contains the specified number of elements from the start of the input sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns a specified number of contiguous values from the start of an observable sequence.
            </summary>
            <param name="source">The sequence to take elements from.</param>
            <param name="count">The number of elements to return.</param>
            <param name="scheduler">Scheduler used to produce an OnCompleted message in case <paramref name="count">count</paramref> is set to 0.</param>
            <returns>An observable sequence that contains the specified number of elements from the start of the input sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Skip``1(System.IObservable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of values in an observable sequence and then returns the remaining values.
            </summary>
            <param name="source">The sequence to take elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>An observable sequence that contains the elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values.
            </summary>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values.
            </summary>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses values in an observable sequence as long as a specified condition is true and then returns the remaining values.
            </summary>
            <param name="source">An observable sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Bypasses values in an observable sequence as long as a specified condition is true and then returns the remaining values.
            </summary>
            <param name="source">An observable sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
            <param name="source">An observable sequence of elements to project.</param>
            <param name="other">An observable sequence to project each element from the source sequence onto.</param>
            <returns>An observable sequence whose elements are the result of projecting each source element onto the other sequence and merging all the resulting sequences together.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
            <param name="source">An observable sequence of elements to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{System.Exception,System.IObservable{``1}},System.Func{System.IObservable{``1}})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
            <param name="source">An observable sequence of elements to project.</param>
            <param name="onNext">A transform function to apply to each element.</param>
            <param name="onError">A transform function to apply when an error occurs in the source sequence.</param>
            <param name="onCompleted">A transform function to apply when the end of the source sequence is reached.</param>
            <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
            <param name="source">An observable sequence of elements to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
            <param name="source">An observable sequence of elements to project.</param>
            <param name="collectionSelector">A transform function to apply to each element.</param>
            <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
            <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
            <param name="source">An observable sequence of elements to project.</param>
            <param name="collectionSelector">A transform function to apply to each element.</param>
            <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
            <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.OfType``1(System.IObservable{System.Object})">
            <summary>
            Filters the elements of an observable sequence based on the specified type.
            </summary>
            <returns>An observable sequence that contains elements from the input sequence of type TResult.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Cast``1(System.IObservable{System.Object})">
            <summary>
            Converts the elements of an observable sequence to the specified type.
            </summary>
            <returns>An observable sequence that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Join``5(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``2}},System.Func{``1,System.IObservable{``3}},System.Func{``0,``1,``4})">
            <summary>
            Correlates the elements of two sequences based on overlapping durations.
            </summary>
            <param name="left">The left observable sequence to join elements for.</param>
            <param name="right">The right observable sequence to join elements for.</param>
            <param name="leftDurationSelector">A function to select the duration of each element of the left observable sequence, used to determine overlap.</param>
            <param name="rightDurationSelector">A function to select the duration of each element of the right observable sequence, used to determine overlap.</param>
            <param name="resultSelector">A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences.</param>
            <returns>An observable sequence that contains result elements computed from source elements that have an overlapping duration.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupJoin``5(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``2}},System.Func{``1,System.IObservable{``3}},System.Func{``0,System.IObservable{``1},``4})">
            <summary>
            Correlates the elements of two sequences based on overlapping durations, and groups the results.
            </summary>
            <param name="left">The left observable sequence to join elements for.</param>
            <param name="right">The right observable sequence to join elements for.</param>
            <param name="leftDurationSelector">A function to select the duration of each element of the left observable sequence, used to determine overlap.</param>
            <param name="rightDurationSelector">A function to select the duration of each element of the right observable sequence, used to determine overlap.</param>
            <param name="resultSelector">A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence.</param>
            <returns>An observable sequence that contains result elements computed from source elements that have an overlapping duration.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Interval(System.TimeSpan)">
            <summary>
            Returns an observable sequence that produces a value after each period.
            </summary>
            <param name="period">Period for producing the values in the resulting sequence.</param>
            <returns>An observable sequence that produces a value after each period.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Interval(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after each period.
            </summary>
            <param name="period">Period for producing the values in the resulting sequence.</param>
            <param name="scheduler">Scheduler to run the timer on.</param>
            <returns>An observable sequence that produces a value after each period.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan)">
            <summary>
            Returns an observable sequence that produces a value after the dueTime has elapsed.
            </summary>
            <param name="dueTime">Relative time at which to produce the value.</param>
            <returns>An observable sequence that produces a value after the due time has elapsed.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset)">
            <summary>
            Returns an observable sequence that produces a value at dueTime.
            </summary>
            <param name="dueTime">Absolute time at which to produce the value.</param>
            <returns>An observable sequence that produces a value at due time.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
            </summary>
            <param name="dueTime">Relative time at which to produce the first value.</param>
            <param name="period">Period to produce subsequent values.</param>
            <returns>An observable sequence that produces a value after due time has elapsed and then after each period.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Returns an observable sequence that produces a value at dueTime and then after each period.
            </summary>
            <param name="dueTime">Absolute time at which to produce the first value.</param>
            <param name="period">Period to produce subsequent values.</param>
            <returns>An observable sequence that produces a value at due time and then after each period.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after the dueTime has elapsed.
            </summary>
            <param name="dueTime">Relative time at which to produce the value.</param>
            <param name="scheduler">Scheduler to run the timer on.</param>
            <returns>An observable sequence that produces a value after the due time has elapsed.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value at dueTime.
            </summary>
            <param name="dueTime">Absolute time at which to produce the value.</param>
            <param name="scheduler">Scheduler to run the timer on.</param>
            <returns>An observable sequence that produces a value at due time.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
            </summary>
            <param name="dueTime">Relative time at which to produce the first value.</param>
            <param name="period">Period to produce subsequent values.</param>
            <param name="scheduler">Scheduler to run the timer on.</param>
            <returns>An observable sequence that produces a value after due time has elapsed and then each period.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value at dueTime and then after each period.
            </summary>
            <param name="dueTime">Absolute time at which to produce the first value.</param>
            <param name="period">Period to produce subsequent values.</param>
            <param name="scheduler">Scheduler to run the timer on.</param>
            <returns>An observable sequence that produces a value at due time and then after each period.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
            <param name="source">Source sequence to delay values for.</param>
            <param name="dueTime">Relative time by which to shift the observable sequence.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
            <param name="source">Source sequence to delay values for.</param>
            <param name="dueTime">Absolute time used to shift the observable sequence; the relative time shift gets computed upon subscription.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
            <param name="source">Source sequence to delay values for.</param>
            <param name="dueTime">Relative time by which to shift the observable sequence.</param>
            <param name="scheduler">Scheduler to run the delay timers on.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
            <param name="source">Source sequence to delay values for.</param>
            <param name="dueTime">Absolute time used to shift the observable sequence; the relative time shift gets computed upon subscription.</param>
            <param name="scheduler">Scheduler to run the delay timers on.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Ignores values from an observable sequence which are followed by another value before dueTime.
            </summary>
            <param name="source">Source sequence to throttle.</param>
            <param name="dueTime">Duration of the throttle period for each value.</param>
            <returns>The throttled sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Ignores values from an observable sequence which are followed by another value before dueTime.
            </summary>
            <param name="source">Source sequence to throttle.</param>
            <param name="dueTime">Duration of the throttle period for each value.</param>
            <param name="scheduler">Scheduler to run the throttle timers on.</param>
            <returns>The throttled sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="timeSpan">Length of each window.</param>
            <param name="timeShift">Interval between creation of consecutive windows.</param>
            <param name="scheduler">Scheduler to run windowing timers on.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on timing information.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="timeSpan">Length of each window.</param>
            <param name="scheduler">Scheduler to run windowing timers on.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
            <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="timeSpan">Length of each window.</param>
            <param name="timeShift">Interval between creation of consecutive windows.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on timing information.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="timeSpan">Length of each window.</param>
            <returns>The sequence of windows.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="timeSpan">Maximum time length of a window.</param>
            <param name="count">Maximum element count of a window.</param>
            <param name="scheduler">Scheduler to run windowing timers on.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
            <summary>
            Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="timeSpan">Maximum time length of a window.</param>
            <param name="count">Maximum element count of a window.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="timeSpan">Length of each buffer.</param>
            <param name="timeShift">Interval between creation of consecutive buffers.</param>
            <param name="scheduler">Scheduler to run buffering timers on.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on timing information.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="timeSpan">Length of each buffer.</param>
            <param name="scheduler">Scheduler to run buffering timers on.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
            <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="timeSpan">Length of each buffer.</param>
            <param name="timeShift">Interval between creation of consecutive buffers.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on timing information.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="timeSpan">Length of each buffer.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="timeSpan">Maximum time length of a buffer.</param>
            <param name="count">Maximum element count of a buffer.</param>
            <param name="scheduler">Scheduler to run buffering timers on.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
            <summary>
            Projects each element of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="timeSpan">Maximum time length of a window.</param>
            <param name="count">Maximum element count of a window.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TimeInterval``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Records the time interval between consecutive values in an observable sequence.
            </summary>
            <param name="source">Source sequence to record time intervals for.</param>
            <param name="scheduler">Scheduler used to compute time intervals.</param>
            <returns>An observable sequence with time interval information on values.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TimeInterval``1(System.IObservable{``0})">
            <summary>
            Records the time interval between consecutive values in an observable sequence.
            </summary>
            <param name="source">Source sequence to record time intervals for.</param>
            <returns>An observable sequence with time interval information on values.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timestamp``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Records the timestamp for each value in an observable sequence.
            </summary>
            <param name="source">Source sequence to timestamp values for.</param>
            <param name="scheduler">Scheduler used to compute timestamps.</param>
            <returns>An observable sequence with timestamp information on values.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timestamp``1(System.IObservable{``0})">
            <summary>
            Records the timestamp for each value in an observable sequence.
            </summary>
            <param name="source">Source sequence to timestamp values for.</param>
            <returns>An observable sequence with timestamp information on values.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sample``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Samples the observable sequence at sampling ticks.
            </summary>
            <param name="source">Source sequence to sample.</param>
            <param name="sampler">Sampling tick sequence.</param>
            <returns>Sampled observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Samples the observable sequence at each interval.
            </summary>
            <param name="source">Source sequence to sample.</param>
            <param name="interval">Interval at which to sample.</param>
            <param name="scheduler">Scheduler to run the sampling timer on.</param>
            <returns>Sampled observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Samples the observable sequence at each interval.
            </summary>
            <param name="source">Source sequence to sample.</param>
            <param name="interval">Interval at which to sample.</param>
            <returns>Sampled observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
            <param name="source">Source sequence to perform a timeout for.</param>
            <param name="dueTime">Maxmimum duration between values before a timeout occurs.</param>
            <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0})">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <param name="source">Source sequence to perform a timeout for.</param>
            <param name="dueTime">Maxmimum duration between values before a timeout occurs.</param>
            <param name="other">Sequence to return in case of a timeout.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
            <param name="source">Source sequence to perform a timeout for.</param>
            <param name="dueTime">Time when a timeout occurs.</param>
            <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0})">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <param name="source">Source sequence to perform a timeout for.</param>
            <param name="dueTime">Time when a timeout occurs.</param>
            <param name="other">Sequence to return in case of a timeout.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
            <param name="source">Source sequence to perform a timeout for.</param>
            <param name="dueTime">Maxmimum duration between values before a timeout occurs.</param>
            <param name="scheduler">Scheduler to run the timeout timers on.</param>
            <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <param name="source">Source sequence to perform a timeout for.</param>
            <param name="dueTime">Maxmimum duration between values before a timeout occurs.</param>
            <param name="other">Sequence to return in case of a timeout.</param>
            <param name="scheduler">Scheduler to run the timeout timers on.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
            <param name="source">Source sequence to perform a timeout for.</param>
            <param name="dueTime">Time when a timeout occurs.</param>
            <param name="scheduler">Scheduler to run the timeout timers on.</param>
            <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <param name="source">Source sequence to perform a timeout for.</param>
            <param name="dueTime">Time when a timeout occurs.</param>
            <param name="other">Sequence to return in case of a timeout.</param>
            <param name="scheduler">Scheduler to run the timeout timers on.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until the condition fails.
            </summary>
            <param name="initialState">Initial state.</param>
            <param name="condition">Condition to terminate generation (upon returning false).</param>
            <param name="iterate">Iteration step function.</param>
            <param name="resultSelector">Selector function for results produced in the sequence.</param>
            <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
            <param name="scheduler">Scheduler on which to run the generator loop.</param>
            <returns>The generated sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan})">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until the condition fails.
            </summary>
            <param name="initialState">Initial state.</param>
            <param name="condition">Condition to terminate generation (upon returning false).</param>
            <param name="iterate">Iteration step function.</param>
            <param name="resultSelector">Selector function for results produced in the sequence.</param>
            <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
            <returns>The generated sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until the condition fails.
            </summary>
            <param name="initialState">Initial state.</param>
            <param name="condition">Condition to terminate generation (upon returning false).</param>
            <param name="iterate">Iteration step function.</param>
            <param name="resultSelector">Selector function for results produced in the sequence.</param>
            <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
            <param name="scheduler">Scheduler on which to run the generator loop.</param>
            <returns>The generated sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset})">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until the condition fails.
            </summary>
            <param name="initialState">Initial state.</param>
            <param name="condition">Condition to terminate generation (upon returning false).</param>
            <param name="iterate">Iteration step function.</param>
            <param name="resultSelector">Selector function for results produced in the sequence.</param>
            <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
            <returns>The generated sequence.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.AnonymousComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Creates an instance of IComparer by providing a method that compares two objects.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.AnonymousComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
        </member>
        <member name="T:System.Reactive.NotificationKind">
            <summary>
            Indicates the type of a notification.
            </summary>
        </member>
        <member name="F:System.Reactive.NotificationKind.OnNext">
            <summary>
            Represents an OnNext notification.
            </summary>
        </member>
        <member name="F:System.Reactive.NotificationKind.OnError">
            <summary>
            Represents an OnError notification.
            </summary>
        </member>
        <member name="F:System.Reactive.NotificationKind.OnCompleted">
            <summary>
            Represents an OnCompleted notification.
            </summary>
        </member>
        <member name="T:System.Reactive.Notification`1">
            <summary>
            Represents a notification to an observer.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.Equals(System.Reactive.Notification{`0})">
            <summary>
            Indicates whether this instance and other are equal.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.op_Equality(System.Reactive.Notification{`0},System.Reactive.Notification{`0})">
            <summary>
            Indicates whether left and right arguments are equal.       
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.op_Inequality(System.Reactive.Notification{`0},System.Reactive.Notification{`0})">
            <summary>
            Indicates whether left and right arguments are not equal.       
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept(System.IObserver{`0})">
            <summary>
            Invokes the observer's method corresponding to the notification.
            </summary>
            <param name="observer">Observer to invoke the notification on.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>
            Invokes the delegate corresponding to the notification.
            </summary>
            <param name="onNext">Delegate to invoke for an OnNext notification.</param>
            <param name="onError">Delegate to invoke for an OnError notification.</param>
            <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>
            Invokes the delegate corresponding to the notification and returns the produced result.
            </summary>
            <param name="onNext">Delegate to invoke for an OnNext notification.</param>
            <param name="onError">Delegate to invoke for an OnError notification.</param>
            <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
            <returns>Result produced by the observation.</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.ToObservable">
            <summary>
            Returns an observable sequence with a single notification, using the immediate scheduler.
            </summary>
            <returns>The observable sequence that surfaces the behavior of the notification upon subscription.</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.ToObservable(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence with a single notification.
            </summary>
            <param name="scheduler">Scheduler to send out the notification calls on.</param>
            <returns>The observable sequence that surfaces the behavior of the notification upon subscription.</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.Value">
            <summary>
            Returns the value of an OnNext notification or throws an exception.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.HasValue">
            <summary>
            Returns a value that indicates whether the notification has a value.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.Exception">
            <summary>
            Returns the exception of an OnError notification or returns null.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.Kind">
            <summary>
            Gets the kind of notification that is represented.
            </summary>
        </member>
        <member name="T:System.Reactive.Notification`1.OnNextNotification">
            <summary>
            Represents a OnNext notification to an observer.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.#ctor(`0)">
            <summary>
            Constructs a notification of a new value.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Equals(System.Reactive.Notification{`0})">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept(System.IObserver{`0})">
            <summary>
            Invokes the observer's method corresponding to the notification.
            </summary>
            <param name="observer">Observer to invoke the notification on.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>
            Invokes the delegate corresponding to the notification.
            </summary>
            <param name="onNext">Delegate to invoke for an OnNext notification.</param>
            <param name="onError">Delegate to invoke for an OnError notification.</param>
            <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>
            Invokes the delegate corresponding to the notification and returns the produced result.
            </summary>
            <param name="onNext">Delegate to invoke for an OnNext notification.</param>
            <param name="onError">Delegate to invoke for an OnError notification.</param>
            <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
            <returns>Result produced by the observation.</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.Value">
            <summary>
            Returns the value of an OnNext notification.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.Exception">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.HasValue">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.Kind">
            <summary>
            Returns NotificationKind.OnNext.
            </summary>
        </member>
        <member name="T:System.Reactive.Notification`1.OnErrorNotification">
            <summary>
            Represents a OnError notification to an observer.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.#ctor(System.Exception)">
            <summary>
            Constructs a notification of an exception.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Equals(System.Reactive.Notification{`0})">
            <summary>
            Indicates whether this instance and other are equal.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept(System.IObserver{`0})">
            <summary>
            Invokes the observer's method corresponding to the notification.
            </summary>
            <param name="observer">Observer to invoke the notification on.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>
            Invokes the delegate corresponding to the notification.
            </summary>
            <param name="onNext">Delegate to invoke for an OnNext notification.</param>
            <param name="onError">Delegate to invoke for an OnError notification.</param>
            <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>
            Invokes the delegate corresponding to the notification and returns the produced result.
            </summary>
            <param name="onNext">Delegate to invoke for an OnNext notification.</param>
            <param name="onError">Delegate to invoke for an OnError notification.</param>
            <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
            <returns>Result produced by the observation.</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.Value">
            <summary>
            Throws the exception.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.Exception">
            <summary>
            Returns the exception.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.HasValue">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.Kind">
            <summary>
            Returns NotificationKind.OnError.
            </summary>
        </member>
        <member name="T:System.Reactive.Notification`1.OnCompletedNotification">
            <summary>
            Represents a OnCompleted notification to an observer.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.#ctor">
            <summary>
            Constructs a notification of the end of a sequence.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Equals(System.Reactive.Notification{`0})">
            <summary>
            Indicates whether this instance and other are equal.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept(System.IObserver{`0})">
            <summary>
            Invokes the observer's method corresponding to the notification.
            </summary>
            <param name="observer">Observer to invoke the notification on.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>
            Invokes the delegate corresponding to the notification.
            </summary>
            <param name="onNext">Delegate to invoke for an OnNext notification.</param>
            <param name="onError">Delegate to invoke for an OnError notification.</param>
            <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>
            Invokes the delegate corresponding to the notification and returns the produced result.
            </summary>
            <param name="onNext">Delegate to invoke for an OnNext notification.</param>
            <param name="onError">Delegate to invoke for an OnError notification.</param>
            <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
            <returns>Result produced by the observation.</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Value">
            <summary>
            Throws an InvalidOperationException.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Exception">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.HasValue">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Kind">
            <summary>
            Returns NotificationKind.OnCompleted.
            </summary>
        </member>
        <member name="T:System.Reactive.Notification">
            <summary>
            Provides a set of static methods for constructing notifications.
            </summary>
        </member>
        <member name="M:System.Reactive.Notification.CreateOnNext``1(``0)">
            <summary>
            Creates an object that represents an OnNext notification to an observer.
            </summary>
            <param name="value">The value contained in the notification.</param>
            <returns>The OnNext notification containing the value.</returns>
        </member>
        <member name="M:System.Reactive.Notification.CreateOnError``1(System.Exception)">
            <summary>
            Creates an object that represents an OnError notification to an observer.
            </summary>
            <param name="error">The exception contained in the notification.</param>
            <returns>The OnError notification containing the exception.</returns>
        </member>
        <member name="M:System.Reactive.Notification.CreateOnCompleted``1">
            <summary>
            Creates an object that represents an OnCompleted notification to an observer.
            </summary>
            <returns>The OnCompleted notification.</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.CurrentThreadScheduler">
            <summary>
            Represents an object that schedules units of work on the current thread.
            </summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.CurrentThread">Singleton instance of this type exposed through this static property.</seealso>
        </member>
        <member name="T:System.Reactive.Concurrency.IScheduler">
            <summary>
            Represents an object that schedules units of work.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.IScheduler.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.CurrentThreadScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.CurrentThreadScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.CurrentThreadScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.ScheduleRequired">
            <summary>
            Gets a value that indicates whether the caller must call a schedule method.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.EventLoopScheduler">
            <summary>
            Represents an object that schedules units of work on a designated thread.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.#ctor">
            <summary>
            Creates an object that schedules units of work on a designated thread.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.#ctor(System.Func{System.Threading.ThreadStart,System.Threading.Thread})">
            <summary>
            Creates an object that schedules units of work on a designated thread.
            </summary>
            <param name="threadFactory">Factory function for thread creation.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.Dispose">
            <summary>
            Ends the thread associated with this scheduler.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.EventLoopScheduler.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.HistoricalSchedulerBase">
            <summary>
            Represents the base class for historical schedulers, virtual time schedulers that use DateTimeOffset for absolute time and TimeSpan for relative time.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2">
            <summary>
            Represents the base class for virtual time schedulers.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.#ctor">
            <summary>
            Creates a new virtual time scheduler with the default value of TAbsolute for the initial clock value.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.#ctor(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new virtual time scheduler.
            </summary>
            <param name="initialClock">Initial value for the clock.</param>
            <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Add(`0,`1)">
            <summary>
            Adds a relative time to an absolute time value.
            </summary>
            <param name="absolute">Absolute time value.</param>
            <param name="relative">Relative time value to add.</param>
            <returns>The resulting absolute time sum value.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ToDateTimeOffset(`0)">
            <summary>
            Converts the absolute time value to a DateTimeOffset value.
            </summary>
            <param name="absolute">Absolute time value to convert.</param>
            <returns>The corresponding DateTimeOffset value.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ToRelative(System.TimeSpan)">
            <summary>
            Converts the TimeSpan value to a relative time value.
            </summary>
            <param name="timeSpan">TimeSpan value to convert.</param>
            <returns>The corresponding relative time value.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ScheduleAbsolute``1(``0,`0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ScheduleRelative``1(``0,`1,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Start">
            <summary>
            Starts the virtual time scheduler.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Stop">
            <summary>
            Stops the virtual time scheduler.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.AdvanceTo(`0)">
            <summary>
            Advances the scheduler's clock to the specified time, running all work till that point.
            </summary>
            <param name="time">Absolute time to advance the scheduler's clock to.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.AdvanceBy(`1)">
            <summary>
            Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
            </summary>
            <param name="time">Relative time to advance the scheduler's clock by.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.GetNext">
            <summary>
            Gets the next scheduled item to be executed.
            </summary>
            <returns>The next scheduled item.</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.IsEnabled">
            <summary>
            Gets whether the scheduler is enabled to run work.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Comparer">
            <summary>
            Gets the comparer used to compare absolute time values.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Clock">
            <summary>
            Gets the scheduler's absolute time clock value.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.#ctor">
            <summary>
            Creates a new historical scheduler, using the minimum value of DateTimeOffset as the initial clock value.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.Add(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Adds a relative time to an absolute time value.
            </summary>
            <param name="absolute">Absolute time value.</param>
            <param name="relative">Relative time value to add.</param>
            <returns>The resulting absolute time sum value.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.ToDateTimeOffset(System.DateTimeOffset)">
            <summary>
            Converts the absolute time value to a DateTimeOffset value.
            </summary>
            <param name="absolute">Absolute time value to convert.</param>
            <returns>The corresponding DateTimeOffset value.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.ToRelative(System.TimeSpan)">
            <summary>
            Converts the TimeSpan value to a relative time value.
            </summary>
            <param name="timeSpan">TimeSpan value to convert.</param>
            <returns>The corresponding relative time value.</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.HistoricalScheduler">
            <summary>
            Provides a virtual time scheduler that uses DateTimeOffset for absolute time and TimeSpan for relative time.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalScheduler.GetNext">
            <summary>
            Gets the next scheduled item to be executed.
            </summary>
            <returns>The next scheduled item.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalScheduler.ScheduleAbsolute``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.ImmediateScheduler">
            <summary>
            Represents an object that schedules units of work to run immediately on the current thread.
            </summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.Immediate">Singleton instance of this type exposed through this static property.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.ImmediateScheduler.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.NewThreadScheduler">
            <summary>
            Represents an object that schedules each unit of work on a separate thread.
            </summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.NewThread">An instance of this type, with default thread creation options, is exposed through this static property.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.#ctor">
            <summary>
            Creates an object that schedules each unit of work on a separate thread.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.#ctor(System.Func{System.Threading.ThreadStart,System.Threading.Thread})">
            <summary>
            Creates an object that schedules each unit of work on a separate thread.
            </summary>
            <param name="threadFactory">Factory function for thread creation.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.NewThreadScheduler.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.IScheduledItem`1">
            <summary>
            Represents a work item that has been scheduled.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduledItem`1.Invoke">
            <summary>
            Invokes the work item.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.IScheduledItem`1.DueTime">
            <summary>
            Get the absolute time at which the item executes.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.Scheduler">
            <summary>
            Provides a set of static methods for creating Schedulers.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Normalize(System.TimeSpan)">
            <summary>
            Ensures that no time spans are negative.
            </summary>
            <param name="timeSpan">The time span to normalize.</param>
            <returns>The time span if it zero or positive otherwise TimeSpan.Zero.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.Action)">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="scheduler">Scheduler to execute the action on.</param>
            <param name="action">Action to execute.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action)">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="scheduler">Scheduler to execute the action on.</param>
            <param name="action">Action to execute.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Action)">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="scheduler">Scheduler to execute the action on.</param>
            <param name="action">Action to execute.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.Action{System.Action})">
            <summary>
            Schedules an action to be executed recursively.
            </summary>
            <param name="scheduler">Scheduler to execute the recursive action on.</param>
            <param name="action">Action to execute recursively.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.Action{``0,System.Action{``0}})">
            <summary>
            Schedules an action to be executed recursively.
            </summary>
            <param name="scheduler">Scheduler to execute the recursive action on.</param>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to execute recursively.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action{System.Action{System.TimeSpan}})">
            <summary>
            Schedules an action to be executed recursively after each dueTime.
            </summary>
            <param name="scheduler">Scheduler to execute the recursive action on.</param>
            <param name="action">Action to execute recursively.</param>
            <param name="dueTime">Relative time after which to execute the action for the first time.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Action{``0,System.Action{``0,System.TimeSpan}})">
            <summary>
            Schedules an action to be executed recursively after each dueTime.
            </summary>
            <param name="scheduler">Scheduler to execute the recursive action on.</param>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to execute recursively.</param>
            <param name="dueTime">Relative time after which to execute the action for the first time.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Action{System.Action{System.DateTimeOffset}})">
            <summary>
            Schedules an action to be executed recursively at each dueTime.
            </summary>
            <param name="scheduler">Scheduler to execute the recursive action on.</param>
            <param name="action">Action to execute recursively.</param>
            <param name="dueTime">Absolute time at which to execute the action for the first time.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Action{``0,System.Action{``0,System.DateTimeOffset}})">
            <summary>
            Schedules an action to be executed recursively at each dueTime.
            </summary>
            <param name="scheduler">Scheduler to execute the recursive action on.</param>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to execute recursively.</param>
            <param name="dueTime">Absolute time at which to execute the action for the first time.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.Now">
            <summary>
            Gets the current date and time.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.Immediate">
            <summary>
            Gets the scheduler that schedules work immediately on the current thread.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.CurrentThread">
            <summary>
            Gets the scheduler that schedules work as soon as possible on the current thread.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.ThreadPool">
            <summary>
            Gets the scheduler that schedules work on the ThreadPool.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.NewThread">
            <summary>
            Gets the scheduler that schedules work on a new thread.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.TaskPool">
            <summary>
            Gets the scheduler that schedules work on the default Task Factory.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.SynchronizationContextScheduler">
            <summary>
            Represents an object that schedules units of work on a provided SynchronizationContext.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Creates an object that schedules units of work on the provided SynchronizationContext.
            </summary>
            <param name="context">Synchronization context to schedule units of work on.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.SynchronizationContextScheduler.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.TaskPoolScheduler">
            <summary>
            Represents an object that schedules units of work using a provided TaskFactory.
            </summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.TaskPool">An instance of this type, using the default TaskFactory, is exposed through this static property.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.TaskPoolScheduler.#ctor(System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates an object that schedules units of work using the provided TaskFactory.
            </summary>
            <param name="taskFactory">Task factory used to create tasks to run units of work.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.TaskPoolScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.TaskPoolScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime, using a System.Threading.Timer object.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.TaskPoolScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime, using a System.Threading.Timer object.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.TaskPoolScheduler.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ThreadPoolScheduler">
            <summary>
            Represents an object that schedules units of work on the threadpool.
            </summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.ThreadPool">Singleton instance of this type exposed through this static property.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime, using a System.Threading.Timer object.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime, using a System.Threading.Timer object.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.ThreadPoolScheduler.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.VirtualTimeScheduler`2">
            <summary>
            Represents the base class for virtual time schedulers using a priority queue for scheduled items.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.#ctor">
            <summary>
            Creates a new virtual time scheduler with the default value of TAbsolute for the initial clock value.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.#ctor(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new virtual time scheduler.
            </summary>
            <param name="initialClock">Initial value for the clock.</param>
            <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.GetNext">
            <summary>
            Gets the next scheduled item to be executed.
            </summary>
            <returns>The next scheduled item.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.ScheduleAbsolute``1(``0,`0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="T:System.Reactive.Disposables.AnonymousDisposable">
            <summary>
            Represents an Action-based disposable.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.AnonymousDisposable.#ctor(System.Action)">
            <summary>
            Constructs a new disposable with the given action used for disposal.
            </summary>
            <param name="dispose">Disposal action.</param>
        </member>
        <member name="M:System.Reactive.Disposables.AnonymousDisposable.Dispose">
            <summary>
            Calls the disposal action.
            </summary>
        </member>
        <member name="T:System.Reactive.Disposables.BooleanDisposable">
            <summary>
            Represents an IDisposable that can be checked for status.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.BooleanDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.BooleanDisposable"/> class.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.BooleanDisposable.Dispose">
            <summary>
            Sets the status to Disposed.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.BooleanDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="T:System.Reactive.Disposables.CancellationDisposable">
            <summary>
            Represents an IDisposable that can be checked for cancellation status.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.CancellationDisposable.#ctor(System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CancellationDisposable"/> class that uses an existing CancellationTokenSource.
            </summary>
            <param name="cts">CancellationTokenSource used for cancellation.</param>
        </member>
        <member name="M:System.Reactive.Disposables.CancellationDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CancellationDisposable"/> class that uses a new CancellationTokenSource.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.CancellationDisposable.Dispose">
            <summary>
            Cancels the CancellationTokenSource.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.CancellationDisposable.Token">
            <summary>
            Gets the CancellationToken used by this CancellationDisposable.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.CancellationDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="T:System.Reactive.Disposables.CompositeDisposable">
            <summary>
            Represents a group of Disposables that are disposed together.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable"/> class from a group of disposables.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable"/> class with the specified number of disposables.
            </summary>
            <param name="capacity">The number of disposables that the new CompositeDisposable can initially store.</param>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.IDisposable[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable"/> class from a group of disposables.
            </summary>
            <param name="disposables">Disposables that will be disposed together.</param>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable"/> class from a group of disposables.
            </summary>
            <param name="disposables">Disposables that will be disposed together.</param>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Add(System.IDisposable)">
            <summary>
            Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
            </summary>
            <param name="item">Disposable to add.</param>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Remove(System.IDisposable)">
            <summary>
            Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
            </summary>
            <param name="item">Disposable to remove.</param>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Dispose">
            <summary>
            Disposes all disposables in the group and removes them from the group.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Clear">
            <summary>
            Removes and disposes all disposables from the GroupDisposable, but does not dispose the CompositeDisposable.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Contains(System.IDisposable)">
            <summary>
            Determines whether the CompositeDisposable contains a specific disposable.
            </summary>
            <param name="item">Disposable to search for.</param>
            <returns>true if the disposable was found; otherwise, false.</returns>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
            <summary>
            Copies the disposables contained in the CompositeDisposable to an array, starting at a particular array index.
            </summary>
            <param name="array">Array to copy the contained disposables to.</param>
            <param name="arrayIndex">Target index at which to copy the first disposable of the group.</param>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the CompositeDisposable.
            </summary>
            <returns>An enumerator to iterate over the disposables.</returns>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the CompositeDisposable.
            </summary>
            <returns>An enumerator to iterate over the disposables.</returns>
        </member>
        <member name="P:System.Reactive.Disposables.CompositeDisposable.Count">
            <summary>
            Gets the number of disposables contained in the CompositeDisposable.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.CompositeDisposable.IsReadOnly">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.CompositeDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="T:System.Reactive.Disposables.ContextDisposable">
            <summary>
            Represents a thread-affine IDisposable.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.ContextDisposable.#ctor(System.Threading.SynchronizationContext,System.IDisposable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.ContextDisposable"/> class that uses a SynchronizationContext on which to dispose the disposable.
            </summary>
            <param name="context">Context to perform disposal on.</param>
            <param name="disposable">Disposable whose Dispose operation to run on the given synchronization context.</param>
        </member>
        <member name="M:System.Reactive.Disposables.ContextDisposable.Dispose">
            <summary>
            Disposes the wrapped disposable on the provided SynchronizationContext.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.ContextDisposable.Context">
            <summary>
            Gets the provided SynchronizationContext.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.ContextDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="T:System.Reactive.Disposables.DefaultDisposable">
            <summary>
            Represents a disposable that does nothing on disposal.
            </summary>
        </member>
        <member name="F:System.Reactive.Disposables.DefaultDisposable.Instance">
            <summary>
            Singleton default disposable.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.DefaultDisposable.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:System.Reactive.Disposables.Disposable">
            <summary>
            Provides a set of static methods for creating Disposables.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.Disposable.Create(System.Action)">
            <summary>
            Creates the disposable that invokes the specified action when disposed.
            </summary>
            <param name="dispose">Action to run during IDisposable.Dispose.</param>
            <returns>The disposable object that runs the given action upon disposal.</returns>
        </member>
        <member name="P:System.Reactive.Disposables.Disposable.Empty">
            <summary>
            Gets the disposable that does nothing when disposed.
            </summary>
        </member>
        <member name="T:System.Reactive.Disposables.MultipleAssignmentDisposable">
            <summary>
            Represents a disposable whose underlying disposable can be swapped for another disposable.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.MultipleAssignmentDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.MultipleAssignmentDisposable"/> class with no current underlying disposable.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.MultipleAssignmentDisposable.Dispose">
            <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.MultipleAssignmentDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.MultipleAssignmentDisposable.Disposable">
            <summary>
            Gets or sets the underlying disposable.
            </summary>
            <remarks>If the MutableDisposable has already been disposed, assignment to this property causes immediate disposal of the given disposable object.</remarks>
        </member>
        <member name="T:System.Reactive.Disposables.RefCountDisposable">
            <summary>
            Represents a disposable that only disposes its underlying disposable when all dependent disposables have been disposed.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.RefCountDisposable.#ctor(System.IDisposable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.RefCountDisposable"/> class with the specified disposable.
            </summary>
            <param name="disposable">Underlying disposable.</param>
        </member>
        <member name="M:System.Reactive.Disposables.RefCountDisposable.Dispose">
            <summary>
            Disposes the underlying disposable only when all dependent disposables have been disposed.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.RefCountDisposable.GetDisposable">
            <summary>
            Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
            </summary>
            <returns>A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.</returns>
        </member>
        <member name="P:System.Reactive.Disposables.RefCountDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="T:System.Reactive.Disposables.ScheduledDisposable">
            <summary>
            Represents an object that schedules units of work on a provided scheduler.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.ScheduledDisposable.#ctor(System.Reactive.Concurrency.IScheduler,System.IDisposable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.ScheduledDisposable"/> class that uses a scheduler on which to dispose the disposable.
            </summary>
        </member>
        <member name="M:System.Reactive.Disposables.ScheduledDisposable.Dispose">
            <summary>
            Disposes the wrapped disposable on the provided scheduler.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.ScheduledDisposable.Disposable">
            <summary>
            Gets a value that indicates the underlying disposable.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.ScheduledDisposable.Scheduler">
            <summary>
            Gets a value that indicates the scheduler.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.ScheduledDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="T:System.Reactive.Subjects.ConnectableObservable`2">
            <summary>
            Represents an observable that can be connected and disconnected from its source.
            </summary>
        </member>
        <member name="T:System.Reactive.Subjects.IConnectableObservable`1">
            <summary>
            Represents an observable that can be connected and disconnected.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.IConnectableObservable`1.Connect">
            <summary>
            Connects the observable.
            </summary>
            <returns>IDisposable object used to disconnect the observable.</returns>
        </member>
        <member name="M:System.Reactive.Subjects.ConnectableObservable`2.#ctor(System.IObservable{`0},System.Reactive.Subjects.ISubject{`0,`1})">
            <summary>
            Creates an observable that can be connected and disconnected from its source.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.ConnectableObservable`2.Connect">
            <summary>
            Connects the observable to its source.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.ConnectableObservable`2.Subscribe(System.IObserver{`1})">
            <summary>
            Subscribes an observer to the observable sequence.
            </summary>
        </member>
        <member name="T:System.Reactive.Subjects.Subject">
            <summary>
            Provides a set of static methods for creating observers.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.Subject.Create``2(System.IObserver{``0},System.IObservable{``1})">
            <summary>
            Creates a subject from the specified observer and observable.
            </summary>
            <param name="observer">The observer used to publish messages to the subject.</param>
            <param name="observable">The observable used to subscribe to messages sent from the subject.</param>
            <returns>Subject implemented using the given observer and observable.</returns>
        </member>
        <member name="M:System.Reactive.Subjects.Subject.Synchronize``2(System.Reactive.Subjects.ISubject{``0,``1})">
            <summary>
            Synchronizes the messages on the subject.
            </summary>
            <param name="subject">The subject to synchronize.</param>
            <returns>Subject whose messages are synchronized.</returns>
        </member>
        <member name="M:System.Reactive.Subjects.Subject.Synchronize``2(System.Reactive.Subjects.ISubject{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Synchronizes the messages on the subject and notifies observers on the specified scheduler.
            </summary>
            <param name="subject">The subject to synchronize.</param>
            <param name="scheduler">Scheduler to notify observers on.</param>
            <returns>Subject whose messages are synchronized and whose observers are notified on the given scheduler.</returns>
        </member>
        <member name="T:System.Reactive.Subjects.ISubject`2">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
        </member>
        <member name="T:System.Reactive.Subjects.AsyncSubject`1">
            <summary>
            Represents the result of an asynchronous operation.
            </summary>
        </member>
        <member name="T:System.Reactive.Subjects.ISubject`1">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.#ctor">
            <summary>
            Creates a subject that can only receive one value and that value is cached for all future observations.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnCompleted">
            <summary>
            Notifies all subscribed observers of the end of the sequence, also causing the last received value to be sent out (if any).
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnError(System.Exception)">
            <summary>
            Notifies all subscribed observers with the exception.
            </summary>
            <param name="error">The exception to send to all subscribed observers.</param>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnNext(`0)">
            <summary>
            Sends a value to the subject. The last value received before successful termination will be sent to all subscribed observers.
            </summary>
            <param name="value">The value to store in the subject.</param>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes an observer to the subject.
            </summary>
            <param name="observer">Observer to subscribe to the subject.</param>
            <remarks>IDisposable object that can be used to unsubscribe the observer from the subject.</remarks>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.Dispose">
            <summary>
            Unsubscribe all observers and release resources.
            </summary>
        </member>
        <member name="T:System.Reactive.Subjects.BehaviorSubject`1">
            <summary>
            Represents a value that changes over time.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.BehaviorSubject`1"/> class which creates a subject that caches its last value and starts with the specified value.
            </summary>
            <param name="value">Initial value sent to observers when no other value has been received by the subject yet.</param>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnCompleted">
            <summary>
            Notifies all subscribed observers of the end of the sequence.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnError(System.Exception)">
            <summary>
            Notifies all subscribed observers with the exception.
            </summary>
            <param name="error">The exception to send to all subscribed observers.</param>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnNext(`0)">
            <summary>
            Notifies all subscribed observers with the value.
            </summary>
            <param name="value">The value to send to all subscribed observers.</param>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes an observer to the subject.
            </summary>
            <param name="observer">Observer to subscribe to the subject.</param>
            <remarks>IDisposable object that can be used to unsubscribe the observer from the subject.</remarks>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.Dispose">
            <summary>
            Unsubscribe all observers and release resources.
            </summary>
        </member>
        <member name="T:System.Reactive.Subjects.Subject`1">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
            <remarks>Fast subjects do not synchronize outgoing calls to subcribed observers using a scheduler. If you need such guarantees, use regular subjects instead.</remarks>
            <seealso cref="T:Subject"/>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.#ctor">
            <summary>
            Creates a subject.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.OnCompleted">
            <summary>
            Notifies all subscribed observers of the end of the sequence.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.OnError(System.Exception)">
            <summary>
            Notifies all subscribed observers with the exception.
            </summary>
            <param name="error">The exception to send to all subscribed observers.</param>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.OnNext(`0)">
            <summary>
            Notifies all subscribed observers with the value.
            </summary>
            <param name="value">The value to send to all subscribed observers.</param>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes an observer to the subject.
            </summary>
            <param name="observer">Observer to subscribe to the subject.</param>
            <remarks>IDisposable object that can be used to unsubscribe the observer from the subject.</remarks>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.Dispose">
            <summary>
            Unsubscribe all observers and release resources.
            </summary>
        </member>
        <member name="T:System.Reactive.Linq.IGroupedObservable`2">
            <summary>
            Represents an observable sequence of values that have a common key.
            </summary>
        </member>
        <member name="P:System.Reactive.Linq.IGroupedObservable`2.Key">
            <summary>
            Gets the common key.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`1">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`1.Then``1(System.Func{`0,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`2">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`2.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`2.Then``1(System.Func{`0,`1,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`3">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`3.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`3.Then``1(System.Func{`0,`1,`2,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`4">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`4.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`4.Then``1(System.Func{`0,`1,`2,`3,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`5">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`5.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`5.Then``1(System.Func{`0,`1,`2,`3,`4,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`6">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`6.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`6.Then``1(System.Func{`0,`1,`2,`3,`4,`5,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`7">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`7.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`7.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`8">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`8.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`8.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`9">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`9.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`9.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`10">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`10.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`10.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`11">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`11.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`11.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`12">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`12.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`12.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`13">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`13.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`13.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`14">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`14.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`14.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`15">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`15.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`15.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`16">
            <summary>
            Represents a join pattern.
            </summary>    
        </member>
        <member name="M:System.Reactive.Joins.Pattern`16.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Reactive.Joins.Plan`1">
            <summary>
            Represents an execution plan for join patterns.
            </summary>    
        </member>
        <member name="T:System.ObservableExtensions">
            <summary>
            Provides a set of static methods for subscribing delegates to observables.
            </summary>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0})">
            <summary>
            Evaluates the observable sequence.
            </summary>
            <param name="source">Observable sequence to subscribe to.</param>
            <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0})">
            <summary>
            Subscribes an element handler to an observable sequence.
            </summary>
            <param name="source">Observable sequence to subscribe to.</param>
            <param name="onNext">Action to invoke for each element in the observable sequence.</param>
            <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Subscribes an element handler and an exception handler to an observable sequence.
            </summary>
            <param name="source">Observable sequence to subscribe to.</param>
            <param name="onNext">Action to invoke for each element in the observable sequence.</param>
            <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
            <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action)">
            <summary>
            Subscribes an element handler and a completion handler to an observable sequence.
            </summary>
            <param name="source">Observable sequence to subscribe to.</param>
            <param name="onNext">Action to invoke for each element in the observable sequence.</param>
            <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
            <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Subscribes an element handler, an exception handler, and a completion handler to an observable sequence.
            </summary>
            <param name="source">Observable sequence to subscribe to.</param>
            <param name="onNext">Action to invoke for each element in the observable sequence.</param>
            <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
            <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
            <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="T:System.Reactive.Observer">
            <summary>
            Provides a set of static methods for creating observers.
            </summary>
        </member>
        <member name="M:System.Reactive.Observer.ToObserver``1(System.Action{System.Reactive.Notification{``0}})">
            <summary>
            Creates an observer from a notification callback.
            </summary>
            <param name="handler">Action that handles a notification.</param>
            <returns>The observer object that invokes the specified handler using a notification corresponding to each message it receives.</returns>
        </member>
        <member name="M:System.Reactive.Observer.ToNotifier``1(System.IObserver{``0})">
            <summary>
            Creates a notification callback from an observer.
            </summary>
            <param name="observer">Observer object.</param>
            <returns>The action that forwards its input notification to the underlying observer.</returns>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0})">
            <summary>
            Creates an observer from the specified OnNext action.
            </summary>
            <param name="onNext">Observer's OnNext action implementation.</param>
            <returns>The observer object implemented using the given actions.</returns>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception})">
            <summary>
            Creates an observer from the specified OnNext and OnError actions.
            </summary>
            <param name="onNext">Observer's OnNext action implementation.</param>
            <param name="onError">Observer's OnError action implementation.</param>
            <returns>The observer object implemented using the given actions.</returns>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action)">
            <summary>
            Creates an observer from the specified OnNext and OnCompleted actions.
            </summary>
            <param name="onNext">Observer's OnNext action implementation.</param>
            <param name="onCompleted">Observer's OnCompleted action implementation.</param>
            <returns>The observer object implemented using the given actions.</returns>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
            </summary>
            <param name="onNext">Observer's OnNext action implementation.</param>
            <param name="onError">Observer's OnError action implementation.</param>
            <param name="onCompleted">Observer's OnCompleted action implementation.</param>
            <returns>The observer object implemented using the given actions.</returns>
        </member>
        <member name="M:System.Reactive.Observer.AsObserver``1(System.IObserver{``0})">
            <summary>
            Hides the identity of an observer.
            </summary>
            <param name="observer">An observer whose identity to hide.</param>
            <returns>An observer that hides the identity of the specified observer.</returns>
        </member>
        <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Object)">
            <summary>
            Synchronizes the observer messages.
            </summary>
            <param name="observer">The observer to synchronize.</param>
            <param name="gate">Gate object to synchronize each observer call on.</param>
            <returns>The observer whose messages are synchronized on the given gate object.</returns>
        </member>
        <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0})">
            <summary>
            Synchronizes the observer messages.
            </summary>
            <param name="observer">The observer to synchronize.</param>
            <returns>The observer whose messages are synchronized.</returns>
        </member>
        <member name="T:System.Reactive.Subjects.ReplaySubject`1">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
            <remarks>Regular subjects do synchronize outgoing calls to subcribed observers using a scheduler. If you don't need such guarantees, use Fast* subjects instead.</remarks>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size, window and scheduler.
            </summary>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <param name="scheduler">Scheduler the observers are invoked on.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size and window.
            </summary>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified scheduler.
            </summary>
            <param name="scheduler">Scheduler the observers are invoked on.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size and scheduler.
            </summary>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="scheduler">Scheduler the observers are invoked on.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size.
            </summary>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified window and scheduler.
            </summary>
            <param name="window">Maximum time length of the replay buffer.</param>
            <param name="scheduler">Scheduler the observers are invoked on.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified window.
            </summary>
            <param name="window">Maximum time length of the replay buffer.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnNext(`0)">
            <summary>
            Notifies all subscribed observers with the value.
            </summary>
            <param name="value">The value to send to all subscribed observers.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnError(System.Exception)">
            <summary>
            Notifies all subscribed observers with the exception.
            </summary>
            <param name="error">The exception to send to all subscribed observers.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnCompleted">
            <summary>
            Notifies all subscribed observers of the end of the sequence.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes an observer to the subject.
            </summary>
            <param name="observer">Observer to subscribe to the subject.</param>
            <remarks>IDisposable object that can be used to unsubscribe the observer from the subject.</remarks>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1"/> class and unsubscribe all observers.
            </summary>
        </member>
        <member name="T:System.Reactive.Threading.Tasks.TaskObservableExtensions">
            <summary>
            Provides a set of static methods for converting Tasks to IObservables.
            </summary>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable(System.Threading.Tasks.Task)">
            <summary>
            Returns an observable sequence that signals when the task completes.
            </summary>
            <param name="task">Task to convert to an observable sequence.</param>
            <returns>An observable sequence that produces a unit value when the task completes, or propagates the exception produced by the task.</returns>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns an observable sequence that propagates the result of the task.
            </summary>
            <param name="task">Task to convert to an observable sequence.</param>
            <returns>An observable sequence that produces the task's result, or propagates the exception produced by the task.</returns>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0})">
            <summary>
            Returns a task that contains the last value of the observable sequence.
            </summary>
            <param name="observable">Observable sequence to convert to a task.</param>
            <returns>A task that contains the last value of the observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Object)">
            <summary>
            Returns a task that contains the last value of the observable sequence.
            </summary>
            <param name="observable">Observable sequence to convert to a task.</param>
            <param name="state">The state to use as the underlying task's AsyncState.</param>
            <returns>A task that contains the last value of the observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns a task that contains the last value of the observable sequence.
            </summary>
            <param name="observable">Observable sequence to convert to a task.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the task, causing unsubscription from the observable sequence.</param>
            <returns>A task that contains the last value of the observable sequence.</returns>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Threading.CancellationToken,System.Object)">
            <summary>
            Returns a task that contains the last value of the observable sequence.
            </summary>
            <param name="observable">Observable sequence to convert to a task.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the task, causing unsubscription from the observable sequence.</param>
            <param name="state">The state to use as the underlying task's AsyncState.</param>
            <returns>A task that contains the last value of the observable sequence.</returns>
        </member>
        <member name="T:System.Reactive.TimeInterval`1">
            <summary>
            Represents a time interval value.
            </summary>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.#ctor(`0,System.TimeSpan)">
            <summary>
            Constructs a timestamped value.
            </summary>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.op_Equality(System.Reactive.TimeInterval{`0},System.Reactive.TimeInterval{`0})">
            <summary>
            Indicates whether first and second arguments are equal.       
            </summary>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.op_Inequality(System.Reactive.TimeInterval{`0},System.Reactive.TimeInterval{`0})">
            <summary>
            Indicates whether first and second arguments are not equal.       
            </summary>
        </member>
        <member name="P:System.Reactive.TimeInterval`1.Interval">
            <summary>
            Gets the interval.
            </summary>
        </member>
        <member name="P:System.Reactive.TimeInterval`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:System.Reactive.Timestamped`1">
            <summary>
            Represents a timestamped value.
            </summary>
        </member>
        <member name="M:System.Reactive.Timestamped`1.#ctor(`0,System.DateTimeOffset)">
            <summary>
            Constructs a timestamped value.
            </summary>
        </member>
        <member name="M:System.Reactive.Timestamped`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:System.Reactive.Timestamped`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:System.Reactive.Timestamped`1.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:System.Reactive.Timestamped`1.op_Equality(System.Reactive.Timestamped{`0},System.Reactive.Timestamped{`0})">
            <summary>
            Indicates whether first and second arguments are equal.       
            </summary>
        </member>
        <member name="M:System.Reactive.Timestamped`1.op_Inequality(System.Reactive.Timestamped{`0},System.Reactive.Timestamped{`0})">
            <summary>
            Indicates whether first and second arguments are not equal.       
            </summary>
        </member>
        <member name="P:System.Reactive.Timestamped`1.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:System.Reactive.Timestamped`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:System.Reactive.Unit">
            <summary>
            Represents void.
            </summary>
        </member>
        <member name="M:System.Reactive.Unit.Equals(System.Reactive.Unit)">
            <summary>
            Indicates whether the current unit is equal to the specified unit.
            </summary>
            <remarks>Always returns true.</remarks>
        </member>
        <member name="M:System.Reactive.Unit.Equals(System.Object)">
            <summary>
            Indicates whether the current unit is equal to the specified object.
            </summary>
            <param name="obj">The System.Object to compare with the current Unit.</param>
            <returns>true if the current unit is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:System.Reactive.Unit.GetHashCode">
            <summary>
            Gets the unit value's hash code.
            </summary>
            <returns>The unit value's hash code.</returns>
        </member>
        <member name="M:System.Reactive.Unit.op_Equality(System.Reactive.Unit,System.Reactive.Unit)">
            <summary>
            Indicates whether first and second arguments are equal.
            </summary>
            <param name="first">The first Unit to compare, or null.</param>
            <param name="second">The second Unit to compare, or null.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:System.Reactive.Unit.op_Inequality(System.Reactive.Unit,System.Reactive.Unit)">
            <summary>
            Indicates whether first and second arguments are not equal.
            </summary>
            <param name="first">The first Unit to compare, or null.</param>
            <param name="second">The second Unit to compare, or null.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="P:System.Reactive.Unit.Default">
            <summary>
            Gets the single unit value.
            </summary>
        </member>
    </members>
</doc>
